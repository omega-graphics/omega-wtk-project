#include "resource.h"
#include "@APPENTRY@"
#include <OmegaWTK.h>
#include <wrl.h>

#pragma comment(lib, "runtimeobject.lib")

#define MAX_LOADSTRING 100

LPCSTR szTitle = "@APPNAME@";                
LPCSTR szWindowClass = "@APPNAME@"; 

OmegaWTK::Core::Vector<HWND> * all_hwnds ;

OmegaWTK::AppInst app;
bool hasLoaded = false;
bool mainWindowHasMenu = false;

void updateAllHWNDPos(UINT root_wnd_height){
     RECT rc;
     auto it = all_hwnds->begin();
     while(it != all_hwnds->end()){
         HWND hwnd = *it;
         GetClientRect(hwnd,&rc);
         SetWindowPos(hwnd,hwnd,rc.left,(root_wnd_height - rc.bottom), rc.right - rc.left,rc.bottom - rc.top,SWP_NOZORDER | SWP_NOACTIVATE);
         ++it;
     };
 };

LRESULT CALLBACK WndProc(HWND hwnd,UINT umsg,WPARAM wParam,LPARAM lParam){
    LRESULT lr = 0;
    if(mainWindowHasMenu){
        if(umsg == WM_MENUCOMMAND){
            UINT idx = wParam;
            HMENU hmenu = (HMENU)lParam;

            MENUINFO info;
            info.cbSize = sizeof(info);
            info.fMask = MIM_MENUDATA;
            GetMenuInfo(hmenu,&info);
            void * WinMenu = (void *) info.dwMenuData;
            select_item_on_win_menu(WinMenu,idx);
            return 0;
        };
    };
    switch(umsg)
    {
        // case WM_CREATE : {
        //     break;
        // }
         case WM_SIZING : {
            if(hasLoaded) {
                if(wParam == WMSZ_BOTTOM) {
                   RECT rc;
                    GetClientRect(hwnd,&rc);
                    updateAllHWNDPos(rc.bottom - rc.top);
                };
           }
            break;
        }
         case WM_SIZE : {
            if(hasLoaded) {
                 UINT width = LOWORD(lParam);
                 UINT height = HIWORD(lParam);
                 updateAllHWNDPos(height);
              }
             break;
        }
        case WM_DPICHANGED : {
            UINT newDpi = HIWORD(wParam);

            RECT* const prcNewWindow = (RECT*)lParam;
            SetWindowPos(hwnd,
                NULL,
                prcNewWindow ->left,
                prcNewWindow ->top,
                prcNewWindow->right - prcNewWindow->left,
                prcNewWindow->bottom - prcNewWindow->top,
                SWP_NOZORDER | SWP_NOACTIVATE);
            break;
        }
        case WM_PAINT : {
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hwnd,&ps);
            EndPaint(hwnd,&ps);
            break;
        }
        case WM_DESTROY : {
            PostQuitMessage(0);
            break;
        }
        default : {
            return DefWindowProc(hwnd,umsg,wParam,lParam);
            break;
        }
    }
    return lr;
};

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,  PSTR lpCmdLine, int nShowCmd){

    // LoadString(hInstance,IDS_APP_TITLE,szTitle,MAX_LOADSTRING);
    // LoadString(hInstance,IDC_@APPNAME@,szWindowClass,MAX_LOADSTRING);

    HRESULT hr;
    hr = CoInitializeEx(NULL,COINIT_MULTITHREADED);
    if(!SUCCEEDED(hr))
    {
        //Handle Error!
    }

    WNDCLASSEX wndclass;
    wndclass.cbSize = sizeof(wndclass);
    wndclass.lpszClassName = szWindowClass;
    wndclass.lpfnWndProc = WndProc;
    wndclass.cbClsExtra     = 0;
    wndclass.cbWndExtra     = 0;
    wndclass.style =  CS_HREDRAW | CS_VREDRAW;
    wndclass.hbrBackground = (HBRUSH)COLOR_WINDOW;
    wndclass.hIcon = LoadIcon(hInstance,MAKEINTRESOURCE(IDI_@APPNAME@));
    wndclass.hCursor = LoadCursor(nullptr,IDC_ARROW);
    wndclass.hInstance = hInstance;
    wndclass.hIconSm = LoadIcon(hInstance,MAKEINTRESOURCE(IDI_SMALL));
    wndclass.lpszMenuName = NULL;

    RegisterClassEx(&wndclass);

    

    HWND hwndWindow = CreateWindowA(szWindowClass,szTitle,WS_OVERLAPPEDWINDOW,CW_USEDEFAULT,CW_USEDEFAULT,1500,1500,NULL,NULL,hInstance,NULL);
   
    
    void *factory = create_hwnd_factory((void *)hInstance,(void *)hwndWindow);

   
   
    omegaWTKMain(&app);

     all_hwnds = (OmegaWTK::Core::Vector<HWND> *)hwnd_factory_get_all_hwnds(factory);
    if(app.menu != nullptr) {
        HMENU menu = (HMENU)app.menu->getNativeMenu()->getNativeBinding();
        if(!SetMenu(hwndWindow,menu)){
            return 0;
        };
        mainWindowHasMenu = true;
    };
    /// Intial Windows Coordinate System Correction!
    RECT rc;
    GetClientRect(hwndWindow,&rc);
    updateAllHWNDPos(rc.bottom - rc.top);


     ShowWindow(hwndWindow,nShowCmd);
    UpdateWindow(hwndWindow);




    hasLoaded = true;
    
    

   


   // HWND rootHWND = (HWND)app.getNAP()->getNativeItemNativeBinding();

   // SetParent(rootHWND,hwndWindow);
   // ShowWindow(rootHWND,SW_SHOW);
 

    HACCEL hAccelTable = LoadAccelerators(hInstance,MAKEINTRESOURCE(IDC_@APPNAME@));

    BOOL breturn;

    MSG msg = {};
    while (GetMessage(&msg,nullptr,0,0))
    {
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    free_hwnd_factory(factory);

    CoUninitialize();

    return msg.wParam;

};