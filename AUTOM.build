#! /usr/bin/env python3


include("./autom/OmegaWTK.autom")

OMEGAWTK_VERSION = "0.6"

Project("OmegaWTK",OMEGAWTK_VERSION)

subdir("./gte")

third_party_dir = f"{root_out_dir}/third_party"
gen_third_party_dir = f"{gen_root_out_dir}/third_party"

assert_expr(program_exists("cmake"))
if is_win:
    zlib_export = [f"{gen_third_party_dir}/zlib/bin/zlib.dll",f"{gen_third_party_dir}/zlib/lib/zlib.lib"]
elif is_mac:
    zlib_export = [f"{gen_third_party_dir}/zlib/lib/libz.dylib"]
    
ThirdParty(
    name="zlib",
    deps=[],
    exports=zlib_export,
    source_dir="./external-libs/zlib/code",
    binary_dir=f"{third_party_dir}/temp/zlib",
    install_dir=f"{third_party_dir}/zlib",
    config=f"cmake -S . -B {third_party_dir}/temp/zlib -G\"Ninja\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\"{third_party_dir}/zlib\"",
    build="cmake --build .",
    install="cmake --build . --target install",
    libs=[f"{gen_third_party_dir}/zlib/lib/zlib.lib"]
)

if is_win:
    libpng_export = [f"{gen_third_party_dir}/libpng/lib/libpng16.lib",f"{gen_third_party_dir}/libpng/bin/libpng16.dll"]
elif is_mac:
    libpng_export = [f"{gen_third_party_dir}/libpng/lib/libpng.dylib"]

ThirdParty(
    name="libpng",
    deps=["zlib"],
    exports=libpng_export,
    source_dir="./external-libs/libpng/code",
    binary_dir=f"{third_party_dir}/temp/libpng",
    install_dir=f"{third_party_dir}/libpng",
    config=f"cmake -S . -B {third_party_dir}/temp/libpng -G\"Ninja\" -DCMAKE_BUILD_TYPE=Release -DPNG_ARM_NEON=off  -DZLIB_DIR=\"{third_party_dir}/zlib\" -DCMAKE_INSTALL_PREFIX=\"{third_party_dir}/libpng\"",
    build="cmake --build .",
    install="cmake --build . --target install",
    libs=[f"{gen_third_party_dir}/libpng/lib/libpng16.lib"]
)
if is_win:
    libjpeg_turbo_export = [f"{gen_third_party_dir}/libjpeg-turbo/bin/turbojpeg.dll",f"{gen_third_party_dir}/libjpeg-turbo/lib/turbojpeg.lib"]
elif is_mac:
    libjpeg_turbo_export = [f"{gen_third_party_dir}/libjpeg-turbo/lib/libturbojpeg.dylib"]

ThirdParty(
    name="libjpeg-turbo",
    deps=["zlib"],
    exports=libjpeg_turbo_export,
    source_dir="./external-libs/libjpeg-turbo/code",
    binary_dir=f"{third_party_dir}/temp/libjpeg-turbo",
    install_dir=f"{third_party_dir}/libjpeg-turbo",
    config=f"cmake -S . -B {third_party_dir}/temp/libjpeg-turbo -G\"Ninja\" -DCMAKE_BUILD_TYPE=Release -DZLIB_DIR=\"{third_party_dir}/zlib\" -DCMAKE_INSTALL_PREFIX=\"{third_party_dir}/libjpeg-turbo\"",
    build="cmake --build .",
    install="cmake --build . --target install",
    libs=[f"{gen_third_party_dir}/libjpeg-turbo/lib/turbojpeg.lib"]
)
if is_win:
    libtiff_export = [f"{gen_third_party_dir}/libtiff/bin/tiff.dll",f"{gen_third_party_dir}/libtiff/lib/tiff.lib"]
elif is_mac:
    libtiff_export = [f"{gen_third_party_dir}/libtiff/lib/libtiff.dylib"]
ThirdParty(
    name="libtiff",
    deps=["zlib","libjpeg-turbo"],
    exports=libtiff_export,
    source_dir="./external-libs/libtiff/code",
    binary_dir=f"{third_party_dir}/temp/libtiff",
    install_dir=f"{third_party_dir}/libtiff",
    config=f"cmake -S . -B {third_party_dir}/temp/libtiff -G\"Ninja\" -DCMAKE_BUILD_TYPE=Release -DZLIB_DIR=\"{third_party_dir}/zlib\"  -DJPEG_DIR=\"{third_party_dir}/libjpeg-turbo\" -DCMAKE_INSTALL_PREFIX=\"{third_party_dir}/libtiff\"",
    build="cmake --build .",
    install="cmake --build . --target install",
    libs=[f"{gen_third_party_dir}/libtiff/lib/tiff.lib"]
)

if is_win:
    icu_lib_exports = [
        f"{gen_third_party_dir}/icu/bin/icuuc69.dll",
        f"{gen_third_party_dir}/icu/bin/icuin69.dll",
        f"{gen_third_party_dir}/icu/bin/icudt69.dll"]

    icu_implib_exports = [
        f"{gen_third_party_dir}/icu/lib/icuuc.lib",
        f"{gen_third_party_dir}/icu/lib/icuin.lib"]
    
elif is_mac:
    icu_lib_exports = [f"{gen_third_party_dir}/icu/lib/libicuuc.dylib",
                    f"{gen_third_party_dir}/icu/lib/libicui18n.dylib",
                    f"{gen_third_party_dir}/icu/lib/libicudata.dylib"]

if is_win:
    src_dir = "./external-libs/icu-69/code/icu4c/source/allinone"
    build_dir = src_dir
    build_com = "vc-init && msbuild allinone.sln -p:Configuration=Release"
    config_ = "vc-init"
    install_com = ""

    Script("icu_build",[],[],third_party_script,[
        "--tmp-dir",abspath(src_dir),
        "--out-dir",abspath(f"{third_party_dir}/icu"),
        "--build",build_com,"--install","cmd.exe /c echo > build.stamp"],[f"{gen_third_party_dir}/icu/build.stamp"])

    Copy("icu_dll_copy",["./external-libs/icu-69/code/icu4c/bin64/icudt69.dll","./external-libs/icu-69/code/icu4c/bin64/icuuc69.dll","./external-libs/icu-69/code/icu4c/bin64/icuin69.dll"],["icu_build"],f"{gen_third_party_dir}/icu/bin")

    Copy("icu_include_copy",["./external-libs/icu-69/code/icu4c/include"],["icu_build"],f"{gen_third_party_dir}/icu")

    Copy("icu_lib_copy",["./external-libs/icu-69/code/icu4c/lib64/icuin.lib","./external-libs/icu-69/code/icu4c/lib64/icuuc.lib"],["icu_build"],f"{gen_third_party_dir}/icu/lib")

    Group("icu",["icu_build","icu_dll_copy","icu_include_copy","icu_lib_copy"])

    Config("icu__conf",[],[f"{third_party_dir}/icu/include"],[])
    set_property("icu__conf","libs",icu_implib_exports)
    
else:
    src_dir = "./external-libs/icu-69/code/icu4c/source"
    build_dir = src_dir
    build_com = "make all"
    config_ = f"./configure --prefix={third_party_dir}/icu"
    install_com = "make install"

    ThirdParty(
        name="icu",
        deps=[],
        exports=icu_lib_exports + icu_implib_exports,
        source_dir=src_dir,
        binary_dir=build_dir,
        install_dir=f"{third_party_dir}/icu",
        config = config_,
        build=build_com,
        install=install_com,
        libs=[]
    )

# assert_expr(program_exists("perl"))

# ThirdParty(
#     name="openssl",
#     deps=[],
#     exports=[f"{gen_third_party_dir}/openssl/lib/libcrypto.dylib",
#              f"{gen_third_party_dir}/openssl/lib/libssl.dylib"],
#     source_dir="./external-libs/openssl/code",
#     binary_dir=f"./external-libs/openssl/code",
#     install_dir=f"{third_party_dir}/openssl",
#     config=f"perl ./Configure --prefix={third_party_dir}/openssl",
#     build="make all",
#     install="make install"
# )


omega_wtk_include_dir = abspath("./include")


standard_defines = []
if is_mac:
    standard_defines += ["TARGET_MACOS"]
elif is_win:
    standard_defines += ["TARGET_WIN32"]

priv_defines = []
if is_win:
    priv_defines += ["WINDOWS_PRIVATE"]



Config("OmegaWTK_Config",[],[omega_wtk_include_dir],standard_defines)
set_property("OmegaWTK_Config","configs",["icu__conf"])

def OmegaWTKModule(name:str,sources:str,deps:"list[str]"):
    SourceSet(f"OmegaWTK{name}",sources,deps)


core_srcs = glob("./src/Core/*.cpp")


OmegaWTKModule(name="Core",sources=core_srcs,deps=["icu","OmegaGTE"])
set_property("OmegaWTKCore","configs",["OmegaWTK_Config"])
append_property("OmegaWTKCore","include_dirs",["./tools/assetc"])
append_property("OmegaWTKCore","defines",priv_defines)

native_srcs = glob("./src/Native/*.cpp")

if is_mac:
    other_srcs = glob("./src/Native/macos/*.mm")
elif is_win:
    other_srcs = glob("./src/Native/win/*.cpp")

OmegaWTKModule(name="Native",sources=native_srcs + other_srcs,deps=["OmegaWTKCore"])
append_property("OmegaWTKNative","include_dirs",["./src/Native/private_include"])
append_property("OmegaWTKNative","defines",priv_defines)

media_srcs = glob("./src/Media/*.cpp")

OmegaWTKModule(name="Media",sources=media_srcs,deps=["OmegaWTKCore","libpng","libtiff"])
append_property("OmegaWTKMedia","configs",["zlib__conf","libpng__conf","libjpeg-turbo__conf","libtiff__conf"])
append_property("OmegaWTKMedia","defines",priv_defines)

composition_srcs = glob("./src/Composition/*.cpp") + glob("./src/Composition/backend/*.cpp")
if is_mac:
    composition_srcs += glob("./src/Composition/backend/mtl/*.mm")
elif is_win:
    composition_srcs += glob("./src/Composition/backend/dx/*.cpp")

OmegaWTKModule(name="Composition",sources=composition_srcs,deps=["OmegaWTKCore","OmegaWTKNative","OmegaWTKMedia"])
append_property("OmegaWTKComposition","include_dirs",["./src/Native/private_include"])
append_property("OmegaWTKComposition","defines",priv_defines)
ui_srcs = glob("./src/UI/*.cpp")

OmegaWTKModule(name="UI",sources=ui_srcs,deps=["OmegaWTKCore","OmegaWTKComposition","OmegaWTKNative","OmegaWTKMedia"])
append_property("OmegaWTKUI","defines",priv_defines)
conf_out = f"./conf_out"

configure("./src/Info.plist.in",f"{conf_out}/OmegaWTK_res/Info.plist")
configure("./src/version.plist.in",f"{conf_out}/OmegaWTK_res/version.plist")



if is_mac:
    FrameworkBundle("OmegaWTK",
    ["./src/OmegaWTK.cpp"],
    ["OmegaWTKCore",
    "OmegaWTKComposition",
    "OmegaWTKNative",
    "OmegaWTKMedia",
    "OmegaWTKUI"],
    "Frameworks",OMEGAWTK_VERSION)

    set_property("OmegaWTK","configs",["OmegaWTK_Config"])
    set_property("OmegaWTK","resources",[f"{conf_out}/OmegaWTK_res/Info.plist",f"{conf_out}/OmegaWTK_res/version.plist"])
    set_property("OmegaWTK","frameworks",["Cocoa.framework","QuartzCore.framework","OmegaGTE.framework"])
    set_property("OmegaWTK","embedded_frameworks",["OmegaGTE.framework"])

elif is_win:
    SharedLibrary("OmegaWTK",["./src/OmegaWTK.cpp"], 
    ["OmegaWTKCore",
    "OmegaWTKComposition",
    "OmegaWTKNative",
    "OmegaWTKMedia",
    "OmegaWTKUI",
    "OmegaGTE",
    "omega-common"],"lib")

    set_property("OmegaWTK","configs",["OmegaWTK_Config"])


def OmegaWTKTest(name:str,app_id:str,sources:"list[str]"):
    if is_mac:
        BUNDLE_ID = app_id
        APPNAME = name
        AppBundle(name,sources + ["./target/macos/main.mm","./target/macos/AppDelegate.mm"],["OmegaWTK"],"Apps")
        configure("./target/macos/Info.plist.in",f"{conf_out}/{name}_res/Info.plist")
        set_property(name,"info_plist",f"{conf_out}/{name}_res/Info.plist")
        set_property(name,"resources",["./target/macos/MainMenu.nib"])
        set_property(name,"frameworks",["OmegaWTK.framework"])
        set_property(name,"embedded_frameworks",["OmegaWTK.framework"])


OmegaWTKTest(name="RootWidgetTest",app_id="org.omegagraphics.RootWidgetTest",sources=["./tests/RootWidget/Main.cpp"])
