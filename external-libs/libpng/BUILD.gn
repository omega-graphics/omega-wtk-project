import("../../gn/ExternalLibs.gni")


copy("pnglibconf_h"){
    sources = [
        "code/scripts/pnglibconf.h.prebuilt"
    ]
    outputs = [
        "${external_lib_path}/libpng/include/pnglibconf.h"
    ]
}

external_lib_target("libpng"){
    public_deps = [
        "../zlib",
        ":pnglibconf_h"
    ]
    include_dirs = [
        "${external_lib_path}/libpng/include"
    ]
    defines = []
    if(is_windows){
        defines += [
            "_CRT_SECURE_NO_DEPRECATE",
            "_CRT_NONSTDC_NO_DEPRECATE"
        ]
    }
    public_configs = ["../zlib:zlib_config"]
    sources = [
        "code/png.c",
        "code/pngerror.c",
        "code/pngget.c",
        "code/pngmem.c",
        "code/pngpread.c",
        "code/pngread.c",
        "code/pngrio.c",
        "code/pngrtran.c",
        "code/pngrutil.c",
        "code/pngset.c",
        "code/pngtrans.c",
        "code/pngwio.c",
        "code/pngwrite.c",
        "code/pngwtran.c",
        "code/pngwutil.c"
    ]
    if(is_windows){
        defines += ["PNG_USE_DLL=1","PNG_IMPEXP=PNG_DLL_EXPORT"]
    }
    if(target_cpu == "x64" || target_cpu == "x86"){
        sources += [
            "code/intel/filter_sse2_intrinsics.c",
            "code/intel/intel_init.c"
        ]
        defines += ["PNG_INTEL_SSE_OPT=0"]
    }
    if(is_mac){
        ldflags = [
            "-install_name",
            "@rpath/libpng.dylib"
        ]
    }
    public_headers = ["code/png.h","code/pngconf.h"]
    output_dir = "${external_lib_path}/libpng"
}

external_lib_export("libpng"){
    targets = ["libpng"]
    output_dir = "${external_lib_path}/libpng"
}