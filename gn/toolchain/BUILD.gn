declare_args(){
    debug = false
    # python3 = ""
}

if(debug){
    debug_flag = "-gdwarf"
}
else {
    debug_flag = ""
}

toolchain("llvm") {
    if(is_windows){
        cc = "clang-cl"
        win_cmd_prefix = "cmd.exe /c"
        obj_ext = "obj"
    }
    if(is_mac || is_linux){
        # python_path = python3
        obj_ext = "o"
    }
    else {
        # lld_command = "lld-link"
    }

    if(is_mac){
        cc = "clang"
        cxx = "clang++"
        # lld_command = "ld"
    }

    tool("asm"){
        if(is_linux || is_mac){
            command = "clang {{defines}} -o {{output}}"
        }
        else {
            command = "clang-cl {{defines}} {{source}} -o {{output}}"
        }
        outputs = [
            "{{source_out_dir}}/{{source_name_part}}.${obj_ext}"
        ]
        description = "Compiling ASM source {{output}}"
    }
    tool("cc") {
        depfile = "{{output}}.d"
        
        if(is_linux || is_mac){
            depsformat = "gcc"
            command = "$cc -MD -MF $depfile  {{defines}} {{include_dirs}} $debug_flag {{cflags_c}}  -c {{source}}  -o {{output}}"
        }
        else {
            depsformat = "msvc"
            command = "$cc /clang:-MD /clang:-MF /clang:$depfile  {{defines}} {{include_dirs}} $debug_flag {{cflags_c}}  -c {{source}}  -o {{output}}"
        }
        description = "Compiling C source {{output}}"
        outputs = [
            "{{source_out_dir}}/{{source_name_part}}.${obj_ext}"
        ]
    }
    tool("cxx"){
        depfile = "{{output}}.d"
        if(is_linux || is_mac){
            command = "$cxx -MD -MF $depfile -std=c++17 {{defines}} {{include_dirs}} $debug_flag {{cflags_c}} {{cflags_cc}} -c {{source}} -o {{output}}"
        }
        else {
            command = "clang-cl /clang:-MD /clang:-MF /clang:$depfile /std:c++17 {{defines}} {{include_dirs}} $debug_flag {{cflags_c}} {{cflags_cc}} -c {{source}} -o {{output}}"
        }
        if(is_linux || is_mac){
            depsformat = "gcc"
        }
        else {
            depsformat = "msvc"
        }
        description = "Compiling CXX source {{output}}"
        outputs = [
            "{{source_out_dir}}/{{source_name_part}}.${obj_ext}"
        ]
    }
    tool("cxx_module"){
        depfile = "{{output}}.d"
        
        if(is_linux || is_mac){
            depsformat = "gcc"
            command = "$cxx -MD -MF $depfile -std=c++17 {{defines}} {{include_dirs}} {{cflags_c}} {{cflags_cc}} -fmodules -fmodule-name={{label}} -Xclang -Xclang -emit-module-interface -c {{source}} -o {{output}}"
        }
        else {
            depsformat = "msvc"
            command = "clang-cl /clang:-MD /clang:-MF /clang:$depfile /std:c++17 {{defines}} {{include_dirs}} {{cflags_c}} {{cflags_cc}} -c {{source}} -o {{output}} -fmodules -fmodule-name={{label}} -Xclang -Xclang -emit-module-interface -c {{source}} -o {{output}}"
        }
        description = "Compiling CXX source for module {{label}} {{output}}"
        outputs = [
            "{{source_out_dir}}/{{source_name_part}}.pcm"
        ]
    }
    if(is_mac){
        tool("objc"){
            depfile = "{{output}}.d"
            depsformat = "gcc"
            description = "Compiling OBJC source {{output}}"
            command = "$cc -MD -MF $depfile  {{defines}} {{include_dirs}} $debug_flag {{cflags_c}} {{cflags_objc}}  -c {{source}}  -o {{output}}"
            outputs = [
                "{{source_out_dir}}/{{source_name_part}}.${obj_ext}"
            ]
        }
        tool("objcxx"){
            depfile = "{{output}}.d"
            depsformat = "gcc"
            description = "Compiling OBJCXX source {{output}}"
            command = "$cxx -MD -MF $depfile -std=c++17 {{defines}} {{include_dirs}} $debug_flag {{cflags_c}} {{cflags_cc}} {{cflags_objc}} {{cflags_objcc}} -c {{source}} -o {{output}}"
            outputs = [
                "{{source_out_dir}}/{{source_name_part}}.${obj_ext}"
            ]
        }
        tool("copy_bundle_data"){
            python_copy = rebase_path("../__copy.py")
            command = "$python_path \"$python_copy\" --src {{source}} --dest {{output}}"
            description = "Copying {{source}} to {{output}}"
        }
    }
    tool("swift"){
        depfile = "{{target_out_dir}}/{{module_name}}.d"
        depsformat = "gcc"

        _new_out = rebase_path("../../out/gen")

        description = "Compiling SWIFT source {{output}}"
        command = "xcrun -sdk macosx swiftc  {{defines}} $debug_flag {{swiftflags}} {{module_dirs}} -emit-dependencies -module-name {{module_name}} -o {{output}} {{include_dirs}} -emit-module -emit-object -enable-library-evolution -emit-module-interface-path $_new_out/{{module_name}}.swiftinterface  {{inputs}}"
        outputs = [
            "{{target_gen_dir}}/{{module_name}}.swiftmodule",
            "{{target_gen_dir}}/{{module_name}}.h",
            "{{target_gen_dir}}/{{module_name}}.swiftdoc",
            "{{target_gen_dir}}/{{module_name}}.swiftsourceinfo",
        ]
        partial_outputs = [
            "{{source_out_dir}}/{{source_name_part}}.o"
        ]
    }
    tool("alink") {
        if(is_windows){
            command = "clang-cl /out:{{output}} /machine:x64 {{inputs}} {{arflags}}"
        }
        else if(is_mac) {
            command = "$cxx -o {{output}} {{inputs}} {{arflags}}"
        }
        outputs = [
            "{{output_dir}}/{{target_output_name}}{{output_extension}}"
        ]
        description = "Linking static archive {{target_output_name}}{{output_extension}}"
        if(is_mac || is_linux){
            default_output_extension = ".a"
            output_prefix = ""
        }
        else {
            default_output_extension = ".lib"
            output_prefix = ""
        }
    }
    tool("solink") {
        outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
        if(is_mac){
            command = "$cxx -o $outfile -Wl, -Xlinker {{ldflags}} {{inputs}} {{solibs}} {{frameworks}} {{swiftmodules}} {{libs}}"  
        }
        # Link MSVC Runtime
        else {
            command = "clang-cl  -Wl  /LD /Fe$outfile {{inputs}}  /link {{ldflags}} {{solibs}} {{libs}}"
        }
        if(is_windows){
            outputs = ["{{output_dir}}/{{target_output_name}}.lib","{{output_dir}}/{{target_output_name}}{{output_extension}}"]
        }
        else {
            outputs = [outfile]
        }
        description = "Linking shared library $outfile"
        # default_output_dir = "{{root_out_dir}}"
    }
    tool("link") {
        outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
        if(is_mac || is_linux){
            command = "$cxx -o $outfile -Wl, {{ldflags}} {{inputs}} {{solibs}} {{frameworks}}  {{libs}} " 
        }
        # Link MSVC Runtime
        else {
            command = "clang-cl /MT /Fe$outfile -Wl {{ldflags}} {{solibs}} {{inputs}} {{libs}}"
        }
        outputs = [outfile]
        description = "Linking executable $outfile"
        # default_output_dir = "{{root_out_dir}}"
    }
    tool("copy"){
        
        python_copy = rebase_path("../__copy.py")
        command = "$python_path $python_copy --src {{source}} --dest {{output}}"
        description = "Copying {{source}} to {{output}}"
    }
    tool("rc"){
        command = "rc.exe /nologo {{defines}} {{include_dirs}} /FO {{output}} {{source}}"
        outputs = [
            "{{source_out_dir}}/{{source_name_part}}.res"
        ]
        depsformat = "msvc"
        description = "Compiling rc script {{output}}"
    }
    if(is_windows){
        stamp = "$win_cmd_prefix echo >"
    }
    else {
        stamp = "touch"
    }
    tool("stamp"){
        command = "$stamp {{output}}"
        description = "Stamping {{output}}"
    }

}