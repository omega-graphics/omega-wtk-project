declare_args(){
    debug = false
    python3 = ""
}

toolchain("llvm") {
    if(is_windows){
        win_cmd_prefix = "cmd.exe /c"
        obj_ext = "obj"
    }
    if(is_mac || is_linux){
        python_path = python3
        obj_ext = "o"
    }
    else {
        lld_command = "lld-link"
    }

    if(is_mac){
        lld_command = "ld"
    }

    tool("cc") {
        depfile = "{{output}}.d"
        command = "clang -MD -MF $depfile  {{defines}} {{include_dirs}} {{cflags_c}}  -c {{source}}  -o {{output}}"
        if(is_linux || is_mac){
            depsformat = "gcc"
        }
        else {
            depsformat = "msvc"
        }
        description = "Compiling C source {{output}}"
        outputs = [
            "{{source_out_dir}}/{{source_name_part}}.${obj_ext}"
        ]
    }
    tool("cxx"){
        depfile = "{{output}}.d"
        command = "clang++ -MD -MF $depfile -std=c++17 {{defines}} {{include_dirs}} {{cflags_c}} {{cflags_cc}} -c {{source}} -o {{output}}"
        if(is_linux || is_mac){
            depsformat = "gcc"
        }
        else {
            depsformat = "msvc"
        }
        description = "Compiling CXX source {{output}}"
        outputs = [
            "{{source_out_dir}}/{{source_name_part}}.${obj_ext}"
        ]
    }
    if(is_mac){
        tool("objc"){
            depfile = "{{output}}.d"
            depsformat = "gcc"
            description = "Compiling OBJC source {{output}}"
            command = "clang -MD -MF $depfile  {{defines}} {{include_dirs}} {{cflags_c}} {{cflags_objc}}  -c {{source}}  -o {{output}}"
            outputs = [
                "{{source_out_dir}}/{{source_name_part}}.${obj_ext}"
            ]
        }
        tool("objcxx"){
            depfile = "{{output}}.d"
            depsformat = "gcc"
            description = "Compiling OBJCXX source {{output}}"
            command = "clang++ -MD -MF $depfile -std=c++17 {{defines}} {{include_dirs}} {{cflags_c}} {{cflags_cc}} {{cflags_objc}} {{cflags_objcc}} -c {{source}} -o {{output}}"
            outputs = [
                "{{source_out_dir}}/{{source_name_part}}.${obj_ext}"
            ]
        }
        tool("copy_bundle_data"){
            python_copy = rebase_path("../__copy.py")
            command = "$python_path \"$python_copy\" --src {{source}} --dest {{output}}"
            description = "Copying {{source}} to {{output}}"
        }
    }
    tool("alink") {
        if(is_windows){
            command = "llvm-lib /out:{{output}} /machine:x64 ucrt.lib User32.lib  {{inputs}} {{arflags}}"
        }
        else if(is_mac) {
            command = "llvm-ar --format=darwin -rs {{output}} {{inputs}} {{arflags}}"
        }
        outputs = [
            "{{target_out_dir}}/{{target_output_name}}{{output_extension}}"
        ]
        description = "Linking static archive {{target_output_name}}{{output_extension}}"
        if(is_mac || is_linux){
            default_output_extension = ".a"
            output_prefix = ""
        }
        else {
            default_output_extension = ".lib"
            output_prefix = ""
        }
    }
    tool("solink") {
        outfile = "{{target_output_name}}{{output_extension}}"
        if(is_mac){
            command = "$lld_command -o $outfile {{ldflags}}  {{inputs}} {{solibs}} {{frameworks}} {{libs}}"  
        }
        # Link MSVC Runtime
        else {
            command = "$lld_command /subsystem:CONSOLE /machine:x64 /dll /out:$outfile  {{inputs}} {{solibs}} msvcrt.lib {{libs}} {{ldflags}}"
        }
        outputs = [outfile]
        description = "Linking executable $outfile"
        default_output_dir = "{{root_out_dir}}"
    }
    tool("link") {
        outfile = "{{target_output_name}}{{output_extension}}"
        if(is_mac || is_linux){
            command = "$lld_command -execute -o $outfile {{ldflags}} {{inputs}} {{solibs}} {{frameworks}}  {{libs}} " 
        }
        # Link MSVC Runtime
        else {
            command = "$lld_command {{ldflags}} /machine:x64   /out:$outfile  {{inputs}} {{solibs}} msvcrt.lib {{libs}}"
        }
        outputs = [outfile]
        description = "Linking executable $outfile"
        default_output_dir = "{{root_out_dir}}"
    }
    tool("copy"){
        
        python_copy = rebase_path("../__copy.py")
        command = "$python_path \"$python_copy\" --src {{source}} --dest {{output}}"
        description = "Copying {{source}} to {{output}}"
    }
    tool("rc"){
        command = "rc {{defines}} {{source}} /FO {{output}}"
        #default_output_dir = "{{target_out_dir}}"
        description = "Compiling rc script {{output}}"
    }
    if(is_windows){
        stamp = "$win_cmd_prefix echo >"
    }
    else {
        stamp = "touch"
    }
    tool("stamp"){
        command = "$stamp {{output}}"
        description = "Stamping {{output}}"
    }

}