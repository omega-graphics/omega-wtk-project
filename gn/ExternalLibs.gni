if(is_linux){
    static_lib_suffix = "a"
    shared_lib_suffix = "so"
    lib_prefix = "lib"
}
else if(is_mac){
    static_lib_suffix = "a"
    shared_lib_suffix = "dylib"
    lib_prefix = "lib"
}
else {
    static_lib_suffix = "lib"
    shared_lib_suffix = "dll"
    lib_prefix = ""
}

external_lib_path = "$root_out_dir/externals/"
template("external_lib"){
        if(!defined(invoker.custom_conf)){
            o = exec_script("//gn/external_lib.py",["--conf",invoker.conf,"--build",rebase_path("$root_out_dir/externals/${target_name}/build"),"--check-outputs",invoker.export],"string")
            print(o)
        }
        else {
            if(!defined(invoker.custom_conf)){
                print("Custom configure command not set!\nExiting...")
            }
            o = exec_script("//gn/external_lib.py",["--custom-conf",invoker.conf_command,"--build-dir",invoker.conf,"--check-outputs",invoker.export],"string")
            print(o)
        }
        
        t_name = target_name

        action("__${target_name}"){
            script = "//gn/external_lib.py"
            if(defined(invoker.custom_build)){
                args = [
                    "--custom-make",
                    invoker.build_command,
                    "--copy-headers"] +
                    copy_include_inputs + [
                    "--copy-headers-dest",
                    copy_include_dest,
                    "--copy-libs"] +
                    copy_lib_inputs + [
                    "--copy-libs-dest",
                    copy_lib_dest
                ]
            }
            else {
                args = [
                    "--make",
                    rebase_path("$root_out_dir/externals/${t_name}/build")
                ]
            }
            args += [
                "--check-outputs",
                invoker.export
            ]
            if(defined(invoker.old_install_name)){
                args += [
                    "--change-install-name",
                    "--lib",
                    rebase_path(invoker.export),
                    "--old-name",
                    invoker.old_install_name,
                    "--new-name",
                    invoker.new_install_name
                ]
            }
            outputs = invoker.outputs
            if(defined(invoker.public_deps)){
                public_deps = invoker.public_deps
            }
        }
    # }

        copy(target_name){
            sources = invoker.public_headers
            # if(built == false){
                public_deps = [":__${t_name}"]
                outputs = [
                    "$root_out_dir/externals/${target_name}/include/{{source_file_part}}"
                ]
            # }
            # else {
            #     if(defined(invoker.public_deps)) {
            #         public_deps = invoker.public_deps
            #     }
            #     not_needed(invoker,["outputs","conf"])
            #     outputs = ["$root_out_dir/externals/${target_name}/include/{{source_file_part}}"]
            # }
            
        }

    config("${target_name}_config"){
        include_dirs = ["$root_out_dir/externals/${target_name}/include"]
        libs = [invoker.export]
    }

    # if(is_mac || is_linux){
    #     target_name = "lib${target_name}"
    # }
    # shared_library(target_name){
    #     forward_variables_from(invoker,["sources","public_deps","libs","cflags_c","cflags_cc","defines"])
    #     if(is_mac){
    #         output_extension = "dylib"
    #     }
    #     else if(is_linux){
    #         output_extension = "so"
    #     }
    #     else {
    #         output_extension = "dll"
    #     }
    #     output_dir = "$root_out_dir/external-libs"
    # }
}

# template("external_lib_target"){
#     assert(defined(invoker.type))
#     target(invoker.type,target_name){
#         if(is_windows){
#             if(invoker.type == "executable"){
#                 output_extension = "exe"
#             }
#             else if(invoker.type == "shared") {
#                 output_extension = "dll"
#             }
#             else if(invoker.type == "static"){
#                 output_extension = "lib"
#             }
#         }
#         else if(is_mac){
#             if(invoker.type == "executable"){
#                 output_extension = ""
#             }
#             else if(invoker.type == "shared") {
#                 output_extension = "dylib"
#             }
#             else if(invoker.type == "static"){
#                 output_extension = "a"
#             }
#         }
#         forward_variables_from(invoker,["libs","sources","include_dirs","cflags_cc","cflags_c","asmflags","ldflags","arflags"])
#     }
# }

# template("external_dep"){
    
#     group(target_name){
#         deps = invoker.targets
#     }
# }