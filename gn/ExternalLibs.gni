if(is_linux){
    static_lib_suffix = "a"
    shared_lib_suffix = "so"
    lib_prefix = "lib"
}
else if(is_mac){
    static_lib_suffix = "a"
    shared_lib_suffix = "dylib"
    lib_prefix = "lib"
}
else {
    static_lib_suffix = "lib"
    shared_lib_suffix = "dll"
    lib_prefix = ""
}

external_lib_path = "$root_out_dir/externals/"
template("external_lib"){
    t_name = target_name
        if(!defined(invoker.custom_conf)){
            assert(defined(invoker.cmake_other_args))
            action(target_name + "__conf"){
                script = "//gn/external_lib.py"
                if(invoker.cmake_other_args != "") {
                    args = ["--conf",invoker.conf,"--build",rebase_path("$root_out_dir/externals/${t_name}/build"),"--check-outputs",invoker.export,"--cmake-args","\"" + invoker.cmake_other_args + "\""]
                }
                else {
                    args = ["--conf",invoker.conf,"--build",rebase_path("$root_out_dir/externals/${t_name}/build"),"--check-outputs",invoker.export,"--cmake-args","\"\""]
                }
                outputs = [
                    "${external_lib_path}/${t_name}/CONF"
                ]
            }
        }
        # else if(invoker.custom_conf == true) {
        #     if(!defined(invoker.conf_command)){
        #         print("Custom configure command not set!\nExiting...")
        #     }
            
        #     o = exec_script("//gn/external_lib.py",["--custom-conf",invoker.conf_command,"--build-dir",invoker.conf,"--check-outputs",invoker.export],"string")
        # }

        if(!defined(invoker.custom_build)){
            action_name = "__${t_name}"
        }
        else if(invoker.custom_build == true) {
            action_name = t_name
        }

        action(action_name){
            public_deps = [
                ":${t_name}__conf"
            ]
            script = "//gn/external_lib.py"
            if(defined(invoker.custom_build)){
                args = [
                    "--custom-make",
                    invoker.build_command,
                    "--copy-headers"] +
                    invoker.copy_include_inputs + [
                    "--copy-headers-dest",
                    invoker.copy_include_dest,
                    "--copy-libs"] +
                    invoker.copy_lib_inputs + [
                    "--copy-libs-dest",
                    invoker.copy_lib_dest
                ]
            }
            else {
                args = [
                    "--make",
                    rebase_path("$root_out_dir/externals/${t_name}/build")
                ]
            }
            args += [
                "--check-outputs",
                invoker.export
            ]
            if(defined(invoker.old_install_name)){
                args += [
                    "--change-install-name",
                    "--lib",
                    rebase_path(invoker.export),
                    "--old-name",
                    invoker.old_install_name,
                    "--new-name",
                    invoker.new_install_name
                ]
            }
            outputs = invoker.outputs
            if(defined(invoker.public_deps)){
                public_deps += invoker.public_deps
            }
        }
    # }
    if(!defined(invoker.custom_build)){

        copy(t_name){
            sources = invoker.public_headers
            # if(built == false){
                public_deps = [":__${t_name}"]
                outputs = [
                    "$root_out_dir/externals/${target_name}/include/{{source_file_part}}"
                ]
            # }
        }
    }

    config("${target_name}_config"){
        include_dirs = ["$root_out_dir/externals/${target_name}/include"]
        libs = [invoker.export]
    }

}