declare_args(){
    python_path = ""
    omega_wtk_include_dir = rebase_path("//include","../",".")
    code_signature = ""
}

if(is_mac){
    template("metal_library"){
        assert(defined(target_name))
        assert(defined(invoker.output_dir))

        n_sources = []
        foreach(s ,invoker.sources){
            n_sources += ["$s"]
        }
        _o_dir = invoker.output_dir
        _args = ["--metallib","-O",rebase_path(_o_dir + "/" + target_name) + ".metallib"] + n_sources
        action(target_name){
            script = rebase_path("//gn/shaderc.py")
            args = _args
            outputs = ["$_o_dir/$target_name.metallib"]
        }
    }
}

template("configure_file"){
    assert(defined(target_name))
    assert(defined(invoker.output_name))
    assert(defined(invoker.dep_name))
    _args = ["-I",rebase_path(target_name),"-O",rebase_path(invoker.output_name),""]
    if(defined(invoker.defines)){
        action(invoker.dep_name){
            script = rebase_path("//gn/ConfigFile.py")
            args = invoker.defines + _args
            outputs = [invoker.output_name]
        }
    }
    else{
        action(invoker.dep_name){
            script =rebase_path( "//gn/ConfigFile.py")
            args = _args
            outputs = [invoker.output_name]
        }
    }
    
}

template("omega_wtk_static_lib"){
    assert(defined(invoker.sources))
    # if(is_windows){
    #  name = target_name + ""
    # }
    # else {
    #     name = target_name
    # }
    _defines = []
    if(is_windows) {
        _defines += [
            "TARGET_WIN32"
        ]
    }
    else if(is_mac){
        _defines += [
            "TARGET_MACOS"
        ]
    }

    if(defined(invoker.defines)){
        invoker.defines += _defines
    }
    else {
        invoker.defines = _defines
    }

    if(defined(invoker.include_dirs)) {
        invoker.include_dirs += [
            "//include"
        ]
    }
    else {
        invoker.include_dirs = [
            "//include"
        ]
    }

    invoker.output_name = "../lib/" + target_name
    
    source_set(target_name){
        forward_variables_from(invoker,"*")
    }
}

template("omega_wtk_shared_lib"){
    assert(defined(invoker.sources))
     
     _defines = []
    if(is_windows) {
        _defines += [
            "TARGET_WIN32"
        ]
    }
    else if(is_mac){
        _defines += [
            "TARGET_MACOS"
        ]
    }

    if(defined(invoker.defines)){
        invoker.defines += _defines
    }
    else {
        invoker.defines = _defines
    }

    if(defined(invoker.include_dirs)) {
        invoker.include_dirs += [
            "//include"
        ]
    }
    else {
        invoker.include_dirs = [
            "//include"
        ]
    }

    if(defined(invoker.framework) && invoker.framework == true){
        assert(defined(invoker.framework_version))
        assert(defined(invoker.framework_info_plist))
        # assert(defined(invoker.framework_version_plist))
        assert(is_mac)
        framework_name = target_name

        bundle_data("${framework_name}_plists"){
            sources = [
                rebase_path(invoker.framework_info_plist),
                # rebase_path(invoker.framework_version_plist)
            ]
            outputs = [
                "{{bundle_resources_dir}}/{{source_file_part}}"
            ]
        }

       create_bundle("${framework_name}.framework"){
          bundle_root_dir = "$root_out_dir/Frameworks/$target_name"  
          bundle_executable_dir = "$bundle_root_dir/Versions/${invoker.framework_version}"
          bundle_resources_dir = "$bundle_root_dir/Versions/${invoker.framework_version}/Resources"
          deps = [
              ":${framework_name}_plists"
          ]
       }
       invoker.public_deps += [
           ":${framework_name}.framework"
       ]
       _libs = [
                "c",
                "c++"
        ]
       invoker.libs = _libs
    #    out_dir = "$root_out_dir/lib"

       symlinks_exist = exec_script("//gn/AppleFramework.py",[
                "--framework",
               rebase_path("$root_out_dir/Frameworks/${framework_name}.framework"),
               "--name",
               "${framework_name}",
               "--current_version",
               "${invoker.framework_version}",
               "--check_links"],"string")
        
       
     
        lib_name = target_name
        

       shared_library(lib_name){
           ldflags = [
               "-dylib",
            #    "-force_load",
            #    rebase_path("$out_dir/omegaWTKCore.a"),
            #    "-force_load",
            #     rebase_path("$out_dir/omegaWTKNative.a"),
            #    "-force_load",
            #     rebase_path("$out_dir/omegaWTKMedia.a"),
            #    "-force_load",
            #     rebase_path("$out_dir/omegaWTKComposition.a"),
            #    "-force_load",
            #     rebase_path("$out_dir/omegaWTKUI.a"),
           ]
            output_extension = ""
            output_name = "Frameworks/${framework_name}.framework/Versions/${invoker.framework_version}/$framework_name"
            forward_variables_from(invoker,["deps","public_deps","sources","include_dirs","defines","libs","frameworks","public_configs"])
        }
            
        if(symlinks_exist == "False") {
            action("${framework_name}_Sym"){
                script = rebase_path("//gn//AppleFramework.py")
                args = [
                    "--framework",
                    rebase_path("$root_out_dir/Frameworks/${framework_name}.framework"),
                    "--name",
                    "${framework_name}",
                    "--current_version",
                    "${invoker.framework_version}"
                ]
                public_deps = [
                    ":${framework_name}"
                ]
                outputs = [
                    "$root_out_dir/Frameworks/${framework_name}.framework/{framework_name}"
                ]
            }
        }
        action("${framework_name}_Final"){
            script = rebase_path("//gn/codesign.py")
            args = [
                "--sig",
                code_signature,
                "--code",
                rebase_path("$root_out_dir/Frameworks/${framework_name}.framework")
            ]
            if(symlinks_exist == "False") {
                public_deps = [
                    ":${framework_name}_Sym"
                ]
            }
            else {
                public_deps = [
                    ":${framework_name}"
                ]
            }
            outputs = [
                "$root_out_dir/Frameworks/${framework_name}.framework/Versions/Current/_CodeSignature/CodeResources"
            ]
        }
    }
    else {
        out_dir = "$root_out_dir/lib"
        shared_library(target_name){
            if(is_mac){
                output_extension = "dylib"
            }
            else if(is_windows){
                cflags_cc = [
                    # "/MD","/Zi","/Ob0","/Od","/RTC1"
                ]
                output_extension = "dll"
                ldflags = [
                   "/INCREMENTAL",
                   "/opt:noref"
                ]
            }
            else {
                output_extension = "so"
            }
            output_name =  rebase_path("$out_dir/$target_name")
            forward_variables_from(invoker,["deps","public_deps","sources","include_dirs","defines","libs","frameworks","public_configs"])
        }
    }
}

template("omega_wtk_app_config"){
    #  assert(defined(sources))
     assert(defined(target_name))
    #  print(target_name)
     assert(defined(invoker.out_dir))

     out_dir = invoker.out_dir
    
    config_defines = [
        "-DAPPNAME=" + target_name,
    ]

    app_name =  target_name

    if(is_windows){
        copy("other-res" + app_name){
            sources = [
                "target/windows/small.ico",
                "target/windows/targetver.h"
            ]
            outputs = [
                "$out_dir/{{source_file_part}}"
            ]
        }
        copy("app_ico" + app_name){
            sources = [
                "target/windows/app.ico"
            ]
            outputs = [
                "$out_dir/${app_name}.ico"
            ]
        }

        configure_file("//target/windows/mmain.cpp.in"){
            defines = config_defines
            dep_name = "main-cpp-config__${app_name}"
            output_name = "$out_dir/mmain.cpp"
        }
        configure_file("//target/windows/resource.h.in"){
            defines = config_defines
            dep_name = "resource-h-config__${app_name}"
            output_name  = "$out_dir/resource.h"
        }
        configure_file("//target/windows/resource_script.rc.in"){
            defines = config_defines
            dep_name = "resource-rc-config__${app_name}_1"
            output_name = "$out_dir/resource_script.rc"
        }
        configure_file("//target/windows/manifest.rc.in"){
            defines = [
                "-DEMBED=" + rebase_path("//target/windows/app.exe.manifest")
            ]
            dep_name = "resource-rc-config__${app_name}_2"
            output_name = "$out_dir/manifest.rc"
        }
        # invoker.deps += [
        #     ":win_copy"
        # ]
    }
    else if(is_mac){
        t_name = "appdelegate-mm-config__${app_name}"
        t_name_2 = "info-plist-config__${app_name}"

        copy("other-res" + app_name){
            sources = [
                "//target/macos/main.mm",
                "//target/macos/English.lproj/MainMenu.xib",
                "//target/macos/AppDelegate.h"
            ]
            outputs = [
                "$out_dir/{{source_file_part}}"
            ]
        }

        configure_file("//target/macos/AppDelegate.mm"){
            defines = config_defines
            dep_name = t_name
            output_name = "$out_dir/AppDelegate.mm"
        }
        configure_file("//target/macos/Info.plist.in"){
            defines = config_defines
            dep_name = t_name_2
            output_name = "$out_dir/Info.plist"
        }
    }
}

template("omega_wtk_test"){
    assert(defined(invoker.sources))
    if(!defined(invoker.include_dirs)){
        invoker.include_dirs = []
    }
    if(!defined(invoker.ldflags)){
        if(is_windows){
            invoker.ldflags = ["/subsystem:WINDOWS"]
        }
        else if(is_mac){
            # invoker.ldflags = ["-"]
        }
    }
    _deps = [
            ":other-res$target_name"
        ]
    app_name = target_name
    if(is_windows){
        _deps += [
            ":OmegaWTK",
            ":app_ico${app_name}",
            ":main-cpp-config__${app_name}",
            ":resource-h-config__${app_name}",
            ":resource-rc-config__${app_name}_1",
            ":resource-rc-config__${app_name}_2"
        ]
    }
    else if(is_mac){
        t_name = "appdelegate-mm-config__${app_name}"
        _deps += [
            ":OmegaWTK_Final",
            ":$t_name",
        ]
    }
    if(defined(invoker.deps)){
        invoker.deps += _deps
    }
    else {
        invoker.deps = _deps
    }
   
    out_dir = "$root_out_dir/obj"

    omega_wtk_app_config(target_name){
        # deps = invoker.deps 
        out_dir =  out_dir
    }

    invoker.include_dirs += [
        rebase_path("$omega_wtk_include_dir"),
        "$out_dir"
    ] 
    if(is_windows){
        invoker.sources += [
            "$out_dir/mmain.cpp",
            "$out_dir/resource_script.rc",
            "$out_dir/manifest.rc"
        ]
        invoker.ldflags += [
            # "/MANIFEST:embed",
            # "/MANIFESTINPUT:" + rebase_path("//target/windows/app.exe.manifest"),
            # "/MANIFESTINPUT:" + rebase_path("//target/windows/intermediate.manifest")
        ]
    }
    _defines = []
    if(is_windows) {
        _defines += [
            "TARGET_WIN32",
            "WINDOWS_PRIVATE"
        ]
    }
    else if(is_mac){
        invoker.framework_dirs = [
            "$root_out_dir/Frameworks"
        ]
        invoker.frameworks = [
            "Cocoa.framework",
            "OmegaWTK.framework"
        ]
        _defines += [
            "TARGET_MACOS"
        ]
        invoker.sources += [
            "$out_dir/AppDelegate.h",
            "$out_dir/AppDelegate.mm",
            "$out_dir/main.mm"
        ]
        _libs = [
            "c",
            "c++"
        ]
        if(defined(invoker.libs)) {
            invoker.libs += _libs
        }
        else {
            invoker.libs = _libs
        }
    }

    if(defined(invoker.defines)){
        invoker.defines += _defines
    }
    else {
        invoker.defines = _defines
    }

    if(is_windows || is_linux){
    invoker.output_name = "tests/" + target_name
    }
    else if(is_mac){
        invoker.output_name = "obj/${app_name}"
    }

    executable(target_name){
        forward_variables_from(invoker,["libs","include_dirs","output_name","sources","defines","deps","public_deps","frameworks","framework_dirs"])
        if(is_windows) {
            output_extension = "exe"
        }
        else if(is_mac){
            ldflags = [
                "-execute",
                "-rpath",
                "@executable_path../Frameworks/OmegaWTK.framework"
            ]
        }
    }
    app_name = "$target_name"
    if(is_mac){

        # action("compile-nib__${target_name}") {
        #     script = rebase_path("gn/ibtool.py")
        #     args = ["-I","../target/macos/English.lproj/MainMenu.xib","-D","$root_out_dir/obj","-O","$root_out_dir/obj/English.lproj/MainMenu.nib"]
        #     outputs = [
        #         "$root_out_dir/obj/English.lproj/MainMenu.nib"
        #     ]
        # }
        bundle_data("${target_name}__metal_copy"){
            public_deps = [
                ":omegawtk",
                # ":compile-nib__${app_name}"
            ]
            sources = [
                "$root_out_dir/lib/omegawtk.metallib",
            ]
            outputs = [
                "{{bundle_resources_dir}}/default.metallib",
                # "{{bundle_resources_dir}}/MainMenu.nib"
            ]
        }
        bundle_data("${target_name}__res_copy"){
            sources = [
                "//target/macos/MainMenu.nib",
            ]
            outputs = [
                "{{bundle_resources_dir}}/{{source_file_part}}",
                # "{{bundle_resources_dir}}/MainMenu.nib"
            ]
        }
         bundle_data("${target_name}__framework_copy"){
            public_deps = [
                ":OmegaWTK_Final"
            ]
            sources = [
                "$root_out_dir/Frameworks/OmegaWTK.framework"
            ]
            outputs = [
                "{{bundle_contents_dir}}/Frameworks/{{source_file_part}}"
            ]
        }
        bundle_data("${target_name}__info_plist"){
            public_deps = [
                ":info-plist-config__${app_name}"
            ]
            sources = [
                "$out_dir/Info.plist"
            ]
            outputs = [
                "{{bundle_contents_dir}}/Info.plist"
            ]
        }
        bundle_data("${target_name}_exec"){
            public_deps = [
                ":$app_name"
            ]
            sources = ["$out_dir/$app_name"]
            outputs = ["{{bundle_executable_dir}}/$app_name"]
        }
        
        create_bundle("${target_name}.app"){

            bundle_root_dir = "$root_build_dir/tests/$target_name"
            bundle_contents_dir  = "$bundle_root_dir/Contents"
            bundle_resources_dir = "$bundle_contents_dir/Resources"
            bundle_executable_dir = "$bundle_contents_dir/MacOS"

            code_signing_script = "//gn/codesign.py"
            code_signing_sources = [
                "$out_dir/$app_name"
            ]
            code_signing_outputs = [
                # "$bundle_executable_dir/$app_name",
                "$bundle_contents_dir/_CodeSignature"
            ]
            code_signing_args = [
                "--sig",
                code_signature,
                "--code",
                rebase_path("$root_out_dir/tests/$app_name.app")
            ]

            xcode_extra_attributes = {
                DEBUG_INFORMATION_FORMAT = "dwarf"
            }
            deps = [
                ":${app_name}__framework_copy",
                ":${app_name}__metal_copy",
                ":${app_name}__res_copy",
                ":${app_name}__info_plist",
                ":$app_name",
                ":${app_name}_exec"
            ]
        }
    }
}

template("omega_wtk_app"){
     assert(defined(invoker.sources))
    if(!defined(invoker.include_dirs)){
        invoker.include_dirs = []
    }
    if(!defined(invoker.ldflags)){
        if(is_windows){
            invoker.ldflags = ["/subsystem:WINDOWS"]
        }
        else if(is_mac){
            # invoker.ldflags = ["-"]
        }
    }
    _deps = [
            ":other-res$target_name"
        ]
    app_name = target_name
    if(is_windows){
        _deps += [
            ":OmegaWTK",
            ":app_ico${app_name}",
            ":main-cpp-config__${app_name}",
            ":resource-h-config__${app_name}",
            ":resource-rc-config__${app_name}_1",
            ":resource-rc-config__${app_name}_2"
        ]
    }
    else if(is_mac){
        t_name = "appdelegate-mm-config__${app_name}"
        _deps += [
            ":OmegaWTK_Final",
            ":$t_name",
        ]
    }
    if(defined(invoker.deps)){
        invoker.deps += _deps
    }
    else {
        invoker.deps = _deps
    }
   
    out_dir = "$root_out_dir/obj"

    # invoker.frameworks = [
    #     "$root_out_dir/Frameworks/OmegaWTK.framework"
    # ]
    omega_wtk_app_config(target_name){
        # deps = invoker.deps 
        out_dir =  out_dir
    }

    invoker.include_dirs += [
        rebase_path("$omega_wtk_include_dir"),
        "$out_dir"
    ] 
    if(is_windows){
        invoker.sources += [
            "$out_dir/mmain.cpp",
            "$out_dir/resource_script.rc",
            "$out_dir/manifest.rc"
        ]
        invoker.ldflags += [
            # "/MANIFEST:embed",
            # "/MANIFESTINPUT:" + rebase_path("//target/windows/app.exe.manifest"),
            # "/MANIFESTINPUT:" + rebase_path("//target/windows/intermediate.manifest")
        ]
    }
    _defines = []
    if(is_windows) {
        _defines += [
            "TARGET_WIN32",
            "WINDOWS_PRIVATE"
        ]
    }
    else if(is_mac){
        invoker.framework_dirs = [
            "$root_out_dir/Frameworks"
        ]
        invoker.frameworks = [
            "Cocoa.framework",
            "OmegaWTK.framework"
        ]
        _defines += [
            "TARGET_MACOS"
        ]
        invoker.sources += [
            "$out_dir/AppDelegate.h",
            "$out_dir/AppDelegate.mm",
            "$out_dir/main.mm"
        ]
        _libs = [
            "c",
            "c++"
        ]
        if(defined(invoker.libs)) {
            invoker.libs += _libs
        }
        else {
            invoker.libs = _libs
        }
    }

    if(defined(invoker.defines)){
        invoker.defines += _defines
    }
    else {
        invoker.defines = _defines
    }

    if(is_windows || is_linux){
        invoker.output_name = "apps/" + target_name
    }
    else if(is_mac){
        invoker.output_name = "obj/${app_name}"
    }

    executable(target_name){
        forward_variables_from(invoker,"*")
        if(is_windows) {
            output_extension = "exe"
        }
        else if(is_mac){
            ldflags = [
                "-execute"
            ]
        }
    }
    app_name = "$target_name"
    if(is_mac){

        # action("compile-nib__${target_name}") {
        #     script = rebase_path("gn/ibtool.py")
        #     args = ["-I","../target/macos/English.lproj/MainMenu.xib","-D","$root_out_dir/obj","-O","$root_out_dir/obj/English.lproj/MainMenu.nib"]
        #     outputs = [
        #         "$root_out_dir/obj/English.lproj/MainMenu.nib"
        #     ]
        # }
        bundle_data("${target_name}__metal_copy"){
            public_deps = [
                ":omegawtk",
                # ":compile-nib__${app_name}"
            ]
            sources = [
                "$root_out_dir/lib/omegawtk.metallib",
            ]
            outputs = [
                "{{bundle_resources_dir}}/default.metallib",
                # "{{bundle_resources_dir}}/MainMenu.nib"
            ]
        }
        bundle_data("${target_name}__framework_copy"){
            public_deps = [
                ":OmegaWTK_Final"
            ]
            sources = [
                "$root_out_dir/Frameworks/OmegaWTK.framework"
            ]
            outputs = [
                "{{bundle_root_dir}}/Frameworks/{{source_file_part}}"
            ]
        }
        bundle_data("${target_name}__res_copy"){
            sources = [
                "//target/macos/MainMenu.nib",
            ]
            outputs = [
                "{{bundle_resources_dir}}/{{source_file_part}}",
                # "{{bundle_resources_dir}}/MainMenu.nib"
            ]
        }
        bundle_data("${target_name}__info_plist"){
            public_deps = [
                ":info-plist-config__${app_name}"
            ]
            sources = [
                "$out_dir/Info.plist"
            ]
            outputs = [
                "{{bundle_contents_dir}}/Info.plist"
            ]
        }
        bundle_data("${target_name}_exec"){
            public_deps = [
                ":$app_name"
            ]
            sources = ["$out_dir/$app_name"]
            outputs = ["{{bundle_executable_dir}}/$app_name"]
        }
        create_bundle("${target_name}.app"){

            bundle_root_dir = "$root_build_dir/apps/$target_name"
            bundle_contents_dir  = "$bundle_root_dir/Contents"
            bundle_resources_dir = "$bundle_contents_dir/Resources"
            bundle_executable_dir = "$bundle_contents_dir/MacOS"

            xcode_extra_attributes = {
                DEBUG_INFORMATION_FORMAT = "dwarf"
            }
            deps = [
                ":${app_name}__framework_copy",
                ":${app_name}__metal_copy",
                ":${app_name}__res_copy",
                ":${app_name}__info_plist",
                ":${app_name}_exec"
            ]
        }
    }
}

