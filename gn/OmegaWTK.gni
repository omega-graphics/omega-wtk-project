import("//gn-utils/Utils.gni")
import("./ExternalExports.gni")

# declare_args(){
#     python_path = ""
# }

omegawtk_include_dir = get_path_info("../include","abspath")
omegawtk_path = get_path_info("../","abspath")
shaderc = get_path_info("./shaderc.py","abspath")

template("test"){
    executable(target_name){
        forward_variables_from(invoker,"*")
    }
}

if(is_mac){
    template("metal_library"){
        assert(defined(target_name))
        assert(defined(invoker.output_dir))

        n_sources = []
        foreach(s ,invoker.sources){
            n_sources += ["$s"]
        }
        _o_dir = invoker.output_dir
        _args = ["--metallib","-O",rebase_path(_o_dir + "/" + target_name) + ".metallib"] + n_sources
        action(target_name){
            script = shaderc
            args = _args
            outputs = ["$_o_dir/$target_name.metallib"]
        }
    }
}

config_file = get_path_info("./ConfigFile.py","abspath")


template("omega_wtk_static_lib"){
    assert(defined(invoker.sources))
    # if(is_windows){
    #  name = target_name + ""
    # }
    # else {
    #     name = target_name
    # }
    _defines = []
    if(is_windows) {
        _defines += [
            "TARGET_WIN32"
        ]
    }
    else if(is_mac){
        _defines += [
            "TARGET_MACOS"
        ]
    }

    if(defined(invoker.defines)){
        invoker.defines += _defines
    }
    else {
        invoker.defines = _defines
    }

    if(defined(invoker.include_dirs)) {
        invoker.include_dirs += [
            omegawtk_include_dir
        ]
    }
    else {
        invoker.include_dirs = [
            omegawtk_include_dir
        ]
    }

    invoker.output_dir = "$root_out_dir/libs"
    
    source_set(target_name){
        forward_variables_from(invoker,"*")
    }
}

template("omega_wtk_shared_lib"){
    assert(defined(invoker.sources))
     
     _defines = []
    if(is_windows) {
        _defines += [
            "TARGET_WIN32"
        ]
    }
    else if(is_mac){
        _defines += [
            "TARGET_MACOS"
        ]
    }

    if(defined(invoker.defines)){
        invoker.defines += _defines
    }
    else {
        invoker.defines = _defines
    }

    if(defined(invoker.include_dirs)) {
        invoker.include_dirs += [
            omegawtk_include_dir
        ]
    }
    else {
        invoker.include_dirs = [
            omegawtk_include_dir
        ]
    }

   if(is_mac && defined(invoker.framework)){
       if(invoker.framework){
        mac_framework_bundle(target_name){
            forward_variables_from(invoker,["deps","public_deps","sources","include_dirs","defines","libs","frameworks","public_configs"])
            output_dir = "$root_out_dir/Frameworks"
            version = invoker.framework_version 
            embedded_libs = invoker.embedded_libs
            if(defined(invoker.embedded_frameworks)){
                embedded_frameworks = invoker.embedded_frameworks
            }
            resources = [invoker.framework_info_plist]
        }
       }
   }
   else {
       shared_library(target_name){
           forward_variables_from(invoker,["deps","public_deps","sources","include_dirs","defines","libs","frameworks","public_configs"])
           output_dir = "$root_out_dir/lib"
           if(is_windows){
            ldflags = [
                "/opt:noref",
                "/INCREMENTAL"
            ]
           }
       }
   }
}

template("omega_wtk_tool"){
    executable(target_name){
        forward_variables_from(invoker,["deps","public_deps","sources","include_dirs","defines","libs","frameworks","public_configs"])
        output_dir = "$root_out_dir/tools"
    }

    if(defined(invoker.external_shared_libs)){
        t_name = target_name
        copy("${t_name}__shared_libs_copy"){
            public_deps = [
                ":$t_name"
            ]
            sources = invoker.external_shared_libs
            outputs = [
                "$root_out_dir/tools/{{source_file_part}}"
            ]
        }
    }
}
# App Config Global Vars

if(is_windows){
    win_other_res = [
        get_path_info("../target/windows/small.ico","abspath"),
        get_path_info("../target/windows/targetver.h","abspath")
    ]
    win_app_manifest = get_path_info("../target/windows/app.exe.manifest","abspath")
    win_app_ico = get_path_info("../target/windows/app.ico","abspath")
    win_mmain = get_path_info("../target/windows/mmain.cpp.in","abspath")
    win_res_h = get_path_info("../target/windows/resource.h.in","abspath")
    win_res_rc = get_path_info("../target/windows/resource_script.rc.in","abspath")
    win_manifest_rc = get_path_info("../target/windows/manifest.rc.in","abspath")
}
else if(is_mac){
    mac_other_res = [
        get_path_info("../target/macos/main.mm","abspath"),
        # "../target/macos/English.lproj/MainMenu.xib",
        get_path_info("../target/macos/AppDelegate.h","abspath")
    ]
    mac_app_delegate = get_path_info("../target/macos/AppDelegate.mm","abspath")
    mac_info_plist = get_path_info("../target/macos/Info.plist.in","abspath")
    mac_app_nib = get_path_info("../target/macos/MainMenu.nib","abspath")
}

template("omega_wtk_app_config"){
    #  assert(defined(sources))
     assert(defined(target_name))
    #  print(target_name)
     assert(defined(invoker.out_dir))

     out_dir = invoker.out_dir
    
    config_defines = [
        "-DAPPNAME=" + target_name,
    ]

    if(defined(invoker.bundle_id)){
        config_defines += [
            "-DBUNDLE_ID=" + invoker.bundle_id
        ]
    }
    else {
        config_defines += [
            "-DBUNDLE_ID=\"\"" 
        ]
    }

    app_name =  target_name

    if(is_windows){
        copy("other-res" + app_name){
            sources = win_other_res
            outputs = [
                "$out_dir/{{source_file_part}}"
            ]
        }
        copy("app_ico" + app_name){
            sources = [
                win_app_ico
            ]
            outputs = [
                "$out_dir/${app_name}.ico"
            ]
        }

        configure_file("main-cpp-config__${app_name}"){
            file = win_mmain
            defines = config_defines
            output_name = "$out_dir/mmain.cpp"
        }
        configure_file("resource-h-config__${app_name}"){
            file = win_res_h
            defines = config_defines
            output_name  = "$out_dir/resource.h"
        }
        configure_file("resource-rc-config__${app_name}_1"){
            file = win_res_rc
            defines = config_defines
            output_name = "$out_dir/resource_script.rc"
        }
        configure_file("resource-rc-config__${app_name}_2"){
            file = win_manifest_rc
            defines = [
                "-DEMBED=\"" + rebase_path(win_app_manifest) + "\""
            ]
            output_name = "$out_dir/manifest.rc"
        }
        # invoker.deps += [
        #     ":win_copy"
        # ]
    }
    else if(is_mac){
        t_name = "appdelegate-mm-config__${app_name}"
        t_name_2 = "info-plist-config__${app_name}"

        copy("other-res" + app_name){
            sources = mac_other_res
            outputs = [
                "$out_dir/{{source_file_part}}"
            ]
        }

        configure_file(t_name){
            file = mac_app_delegate
            defines = config_defines
            output_name = "$out_dir/AppDelegate.mm"
        }
        configure_file(t_name_2){
            file = mac_info_plist
            defines = config_defines
            output_name = "$out_dir/Info.plist"
        }
    }
}

assetc = get_path_info("assetc.py","abspath")

template("omega_wtk_test"){
    assert(defined(invoker.sources))
    if(!defined(invoker.include_dirs)){
        invoker.include_dirs = []
    }
    if(!defined(invoker.ldflags)){
        if(is_windows){
            invoker.ldflags = ["/subsystem:WINDOWS"]
        }
        else if(is_mac){
            # invoker.ldflags = ["-"]
        }
    }
    _deps = [
            ":other-res$target_name"
        ]
    app_name = target_name
    if(is_windows){
        _deps += [
            omegawtk_path + ":OmegaWTK",
            ":app_ico${app_name}",
            ":main-cpp-config__${app_name}",
            ":resource-h-config__${app_name}",
            ":resource-rc-config__${app_name}_1",
            ":resource-rc-config__${app_name}_2",
            omegawtk_path + ":omegawtk-assetc"
        ]
    }
    else if(is_mac){
        t_name = "appdelegate-mm-config__${app_name}"
        _deps += [
            omegawtk_path + ":OmegaWTK.framework",
            ":$t_name",
            omegawtk_path + ":omegawtk-assetc"
        ]
    }
    if(defined(invoker.deps)){
        invoker.public_deps += _deps
    }
    else {
        invoker.public_deps = _deps
    }
   
    out_dir = "$root_out_dir/obj/${target_name}"

    omega_wtk_app_config(target_name){
        # deps = invoker.deps 
        out_dir =  out_dir
        if(is_mac){
            if(defined(invoker.bundle_id)){
                bundle_id = invoker.bundle_id
            }
        }
    }

    invoker.include_dirs += [
        omegawtk_include_dir,
        "$out_dir"
    ] 
    if(is_windows){
        invoker.sources += [
            "$out_dir/mmain.cpp",
            "$out_dir/resource_script.rc",
            "$out_dir/manifest.rc"
        ]
        invoker.ldflags += [
            # "/MANIFEST:embed",
            # "/MANIFESTINPUT:" + rebase_path("//target/windows/app.exe.manifest"),
            # "/MANIFESTINPUT:" + rebase_path("//target/windows/intermediate.manifest")
        ]
    }
    _defines = []
    if(is_windows) {
        _defines += [
            "OMEGAWTK_APP",
            "TARGET_WIN32",
            "WINDOWS_PRIVATE"
        ]
    }
    else if(is_mac){
        invoker.framework_dirs = [
            "$root_out_dir/Frameworks"
        ]
        invoker.frameworks = [
            "Cocoa.framework",
            "OmegaWTK.framework"
        ]
        _defines += [
            "TARGET_MACOS"
        ]
        invoker.sources += [
            "$out_dir/AppDelegate.h",
            "$out_dir/AppDelegate.mm",
            "$out_dir/main.mm"
        ]
        _libs = [
            "c",
            "c++"
        ]
        if(defined(invoker.libs)) {
            invoker.libs += _libs
        }
        else {
            invoker.libs = _libs
        }
    }

    if(defined(invoker.defines)){
        invoker.defines += _defines
    }
    else {
        invoker.defines = _defines
    }
    
    app_name = target_name

    executable(target_name){
        forward_variables_from(invoker,["libs","include_dirs","output_name","sources","defines","deps","public_deps","frameworks","framework_dirs"])
        if(is_windows) {
            ldflags = [
                # "/Od",
                "User32.lib",
                # "/link",
                # "/MANIFEST:embed",
                # "/MANIFESTINPUT:" + rebase_path("//target/windows/app.exe.manifest"),
                # "/MANIFESTINPUT:" + rebase_path("//target/windows/intermediate.manifest")
            ]
            cflags_cc = [
               
            ]
        }
        else if(is_mac){
            ldflags = [
               "-Xlinker",
               "-rpath",
               "-Xlinker",
               "@loader_path/../Frameworks",
                "-Xlinker",
               "-rpath",
               "-Xlinker",
               "@loader_path/../Frameworks/OmegaWTK.framework/Libraries"
            ]
        }

        if(is_mac){
            output_dir = "$root_out_dir/obj/${app_name}"
           
        }
        else {
            output_dir = "$root_out_dir/tests/${app_name}"
        }
    }

    if(is_mac){
        if(defined(invoker.assets_dir)){
            app_assets_dest = "$root_out_dir/obj/tests/${app_name}"
        }
    }
           
    if(is_windows){
        if(defined(invoker.assets_dir)){
            app_assets_dest = "$root_out_dir/tests/${app_name}"
        }

        copy("${app_name}__dlls"){
            public_deps = [
                ":${app_name}"
            ]
            sources = [
                "$root_out_dir/lib/OmegaWTK.dll",
                libpng_link,
                zlib_link,
                pcre2_link,
            ] + libjpeg_turbo_link
            outputs = [
                "$root_out_dir/tests/${app_name}/{{source_file_part}}"
            ]
        }
        
    }

    # template("compile_assets"){

    if(defined(invoker.assets_dir)){

        exec_ext = ""
        if(is_windows){
            exec_ext = ".exe"
        }

        o = app_assets_dest + "/assets.omxa"

            action("${o}__${app_name}"){
                script = assetc
                public_deps = [
                    omegawtk_path + ":omegawtk-assetc"
                ]
                args = [
                    "--assetc",
                    rebase_path("$root_out_dir/tools/omegawtk-assetc${exec_ext}"),
                    "--output",
                    rebase_path(o),
                    "--dir",
                    rebase_path(invoker.assets_dir),
                    "--app-id",
                    invoker.bundle_id
                ]
                outputs = [
                    o
                ]
            }

    }

    # }

    if(is_mac){

        # action("compile-nib__${target_name}") {
        #     script = rebase_path("gn/ibtool.py")
        #     args = ["-I","../target/macos/English.lproj/MainMenu.xib","-D","$root_out_dir/obj","-O","$root_out_dir/obj/English.lproj/MainMenu.nib"]
        #     outputs = [
        #         "$root_out_dir/obj/English.lproj/MainMenu.nib"
        #     ]
        # }
        bundle_data("${target_name}__metal_copy"){
            public_deps = [
                ":omegawtk",
                # ":compile-nib__${app_name}"
            ]
            sources = [
                "$root_out_dir/lib/omegawtk.metallib",
            ]
            outputs = [
                "{{bundle_resources_dir}}/default.metallib",
                # "{{bundle_resources_dir}}/MainMenu.nib"
            ]
        }
        bundle_data("${target_name}__res_copy"){
            if(defined(invoker.assets_dir)){
                public_deps = [
                    ":${o}__${app_name}"
                ]
            }
            sources = [
                mac_app_nib,
            ]
            if(defined(invoker.assets_dir)){
                sources += [
                    o
                ]
            }
            outputs = [
                "{{bundle_resources_dir}}/{{source_file_part}}",
            ]
        }
         bundle_data("${target_name}__framework_copy"){
            public_deps = [
                ":OmegaWTK.framework"
            ]
            sources = [
                "$root_out_dir/Frameworks/OmegaWTK.framework"
            ]
            outputs = [
                "{{bundle_contents_dir}}/Frameworks/{{source_file_part}}"
            ]
        }
        bundle_data("${target_name}__info_plist"){
            public_deps = [
                ":info-plist-config__${app_name}"
            ]
            sources = [
                "$out_dir/Info.plist"
            ]
            outputs = [
                "{{bundle_contents_dir}}/Info.plist"
            ]
        }
        bundle_data("${target_name}_exec"){
            public_deps = [
                ":$app_name"
            ]
            sources = ["$out_dir/$app_name"]
            outputs = ["{{bundle_executable_dir}}/$app_name"]
        }
        
        create_bundle("${target_name}.app"){

            bundle_root_dir = "$root_out_dir/tests/$target_name"
            bundle_contents_dir  = "$bundle_root_dir/Contents"
            bundle_resources_dir = "$bundle_contents_dir/Resources"
            bundle_executable_dir = "$bundle_contents_dir/MacOS"

            code_signing_script = codesign
            code_signing_sources = [
                "$out_dir/$app_name"
            ]
            code_signing_outputs = [
                # "$bundle_executable_dir/$app_name",
                "$bundle_contents_dir/_CodeSignature"
            ]
            code_signing_args = [
                "--sig",
                code_signature,
                "--code",
                rebase_path("$root_out_dir/tests/$app_name.app")
            ]

            xcode_extra_attributes = {
                DEBUG_INFORMATION_FORMAT = "dwarf"
            }
            deps = [
                ":${app_name}__framework_copy",
                ":${app_name}__metal_copy",
                ":${app_name}__res_copy",
                ":${app_name}__info_plist",
                ":$app_name",
                ":${app_name}_exec"
            ]
        }
    }
}

template("omega_wtk_app"){
    assert(defined(invoker.sources))
    if(!defined(invoker.include_dirs)){
        invoker.include_dirs = []
    }
    if(!defined(invoker.ldflags)){
        if(is_windows){
            invoker.ldflags = ["/subsystem:WINDOWS"]
        }
        else if(is_mac){
            # invoker.ldflags = ["-"]
        }
    }
    _deps = [
            ":other-res$target_name"
        ]
    app_name = target_name
    if(is_windows){
        _deps += [
            omegawtk_path + ":OmegaWTK",
            ":app_ico${app_name}",
            ":main-cpp-config__${app_name}",
            ":resource-h-config__${app_name}",
            ":resource-rc-config__${app_name}_1",
            ":resource-rc-config__${app_name}_2",
            omegawtk_path + ":omegawtk-assetc"
        ]
    }
    else if(is_mac){
        t_name = "appdelegate-mm-config__${app_name}"
        _deps += [
            omegawtk_path + ":OmegaWTK.framework",
            ":$t_name",
            omegawtk_path + ":omegawtk-assetc"
        ]
    }
    if(defined(invoker.deps)){
        invoker.public_deps += _deps
    }
    else {
        invoker.public_deps = _deps
    }
   
    out_dir = "$root_out_dir/obj/${target_name}"

    omega_wtk_app_config(target_name){
        # deps = invoker.deps 
        out_dir =  out_dir
        if(is_mac){
            if(defined(invoker.bundle_id)){
                bundle_id = invoker.bundle_id
            }
        }
    }

    invoker.include_dirs += [
        omegawtk_include_dir,
        "$out_dir"
    ] 
    if(is_windows){
        invoker.sources += [
            "$out_dir/mmain.cpp",
            "$out_dir/resource_script.rc",
            "$out_dir/manifest.rc"
        ]
        invoker.ldflags += [
            # "/MANIFEST:embed",
            # "/MANIFESTINPUT:" + rebase_path("//target/windows/app.exe.manifest"),
            # "/MANIFESTINPUT:" + rebase_path("//target/windows/intermediate.manifest")
        ]
    }
    _defines = []
    if(is_windows) {
        _defines += [
            "OMEGAWTK_APP",
            "TARGET_WIN32",
            "WINDOWS_PRIVATE"
        ]
    }
    else if(is_mac){
        invoker.framework_dirs = [
            "$root_out_dir/Frameworks"
        ]
        invoker.frameworks = [
            "Cocoa.framework",
            "OmegaWTK.framework"
        ]
        _defines += [
            "TARGET_MACOS"
        ]
        invoker.sources += [
            "$out_dir/AppDelegate.h",
            "$out_dir/AppDelegate.mm",
            "$out_dir/main.mm"
        ]
        _libs = [
            "c",
            "c++"
        ]
        if(defined(invoker.libs)) {
            invoker.libs += _libs
        }
        else {
            invoker.libs = _libs
        }
    }

    if(defined(invoker.defines)){
        invoker.defines += _defines
    }
    else {
        invoker.defines = _defines
    }
    
    app_name = target_name

    executable(target_name){
        forward_variables_from(invoker,["libs","include_dirs","output_name","sources","defines","deps","public_deps","frameworks","framework_dirs"])
        if(is_windows) {
            ldflags = [
                # "/Od",
                "User32.lib",
                # "/link",
                # "/MANIFEST:embed",
                # "/MANIFESTINPUT:" + rebase_path("//target/windows/app.exe.manifest"),
                # "/MANIFESTINPUT:" + rebase_path("//target/windows/intermediate.manifest")
            ]
            cflags_cc = [
               
            ]
        }
        else if(is_mac){
            ldflags = [
               "-Xlinker",
               "-rpath",
               "-Xlinker",
               "@loader_path/../Frameworks",
                "-Xlinker",
               "-rpath",
               "-Xlinker",
               "@loader_path/../Frameworks/OmegaWTK.framework/Libraries"
            ]
        }

        if(is_mac){
            output_dir = "$root_out_dir/obj/${app_name}"
           
        }
        else {
            output_dir = "$root_out_dir/tests/${app_name}"
        }
    }

    if(is_mac){
        if(defined(invoker.assets_dir)){
            app_assets_dest = "$root_out_dir/obj/tests/${app_name}"
        }
    }
           
    if(is_windows){
        if(defined(invoker.assets_dir)){
            app_assets_dest = "$root_out_dir/tests/${app_name}"
        }

        copy("${app_name}__dlls"){
            public_deps = [
                ":${app_name}"
            ]
            sources = [
                "$root_out_dir/lib/OmegaWTK.dll",
                libpng_link,
                zlib_link,
                pcre2_link,
            ] + libjpeg_turbo_link
            outputs = [
                "$root_out_dir/tests/${app_name}/{{source_file_part}}"
            ]
        }
        
    }

    # template("compile_assets"){

    if(defined(invoker.assets_dir)){

        exec_ext = ""
        if(is_windows){
            exec_ext = ".exe"
        }

        o = app_assets_dest + "/assets.omxa"

            action("${o}__${app_name}"){
                script = assetc
                public_deps = [
                    omegawtk_path + ":omegawtk-assetc"
                ]
                args = [
                    "--assetc",
                    rebase_path("$root_out_dir/tools/omegawtk-assetc${exec_ext}"),
                    "--output",
                    rebase_path(o),
                    "--dir",
                    rebase_path(invoker.assets_dir),
                    "--app-id",
                    invoker.bundle_id
                ]
                outputs = [
                    o
                ]
            }

    }

    # }

    if(is_mac){

        # action("compile-nib__${target_name}") {
        #     script = rebase_path("gn/ibtool.py")
        #     args = ["-I","../target/macos/English.lproj/MainMenu.xib","-D","$root_out_dir/obj","-O","$root_out_dir/obj/English.lproj/MainMenu.nib"]
        #     outputs = [
        #         "$root_out_dir/obj/English.lproj/MainMenu.nib"
        #     ]
        # }
        bundle_data("${target_name}__metal_copy"){
            public_deps = [
                "../:omegawtk",
                # ":compile-nib__${app_name}"
            ]
            sources = [
                "$root_out_dir/lib/omegawtk.metallib",
            ]
            outputs = [
                "{{bundle_resources_dir}}/default.metallib",
                # "{{bundle_resources_dir}}/MainMenu.nib"
            ]
        }
        bundle_data("${target_name}__res_copy"){
            if(defined(invoker.assets_dir)){
                public_deps = [
                    ":${o}__${app_name}"
                ]
            }
            sources = [
                mac_app_nib,
            ]
            if(defined(invoker.assets_dir)){
                sources += [
                    o
                ]
            }
            outputs = [
                "{{bundle_resources_dir}}/{{source_file_part}}",
            ]
        }
         bundle_data("${target_name}__framework_copy"){
            public_deps = [
                ":OmegaWTK.framework"
            ]
            sources = [
                "$root_out_dir/Frameworks/OmegaWTK.framework"
            ]
            outputs = [
                "{{bundle_contents_dir}}/Frameworks/{{source_file_part}}"
            ]
        }
        bundle_data("${target_name}__info_plist"){
            public_deps = [
                ":info-plist-config__${app_name}"
            ]
            sources = [
                "$out_dir/Info.plist"
            ]
            outputs = [
                "{{bundle_contents_dir}}/Info.plist"
            ]
        }
        bundle_data("${target_name}_exec"){
            public_deps = [
                ":$app_name"
            ]
            sources = ["$out_dir/$app_name"]
            outputs = ["{{bundle_executable_dir}}/$app_name"]
        }
        
        create_bundle("${target_name}.app"){

            bundle_root_dir = "$root_out_dir/apps/$target_name"
            bundle_contents_dir  = "$bundle_root_dir/Contents"
            bundle_resources_dir = "$bundle_contents_dir/Resources"
            bundle_executable_dir = "$bundle_contents_dir/MacOS"

            code_signing_script = codesign
            code_signing_sources = [
                "$out_dir/$app_name"
            ]
            code_signing_outputs = [
                # "$bundle_executable_dir/$app_name",
                "$bundle_contents_dir/_CodeSignature"
            ]
            code_signing_args = [
                "--sig",
                code_signature,
                "--code",
                rebase_path("$root_out_dir/tests/$app_name.app")
            ]

            xcode_extra_attributes = {
                # DEBUG_INFORMATION_FORMAT = "dwarf"
            }
            deps = [
                ":${app_name}__framework_copy",
                ":${app_name}__metal_copy",
                ":${app_name}__res_copy",
                ":${app_name}__info_plist",
                ":$app_name",
                ":${app_name}_exec"
            ]
        }
    }
}
