declare_args(){
    python_path = ""
    omega_wtk_include_dir = rebase_path("//include","../",".")
}

if(is_mac){
    template("metal_library"){
        assert(defined(target_name))
        assert(defined(invoker.output_dir))

        n_sources = []
        foreach(s ,invoker.sources){
            n_sources += ["$s"]
        }
        _o_dir = invoker.output_dir
        _args = ["--metallib","-O",rebase_path(_o_dir + "/" + target_name) + ".metallib"] + n_sources
        action(target_name){
            script = rebase_path("//gn/shaderc.py")
            args = _args
            outputs = ["$_o_dir/$target_name.metallib"]
        }
    }
}

template("configure_file"){
    assert(defined(target_name))
    assert(defined(invoker.output_name))
    assert(defined(invoker.dep_name))
    _args = ["-I",rebase_path(target_name),"-O",rebase_path(invoker.output_name),""]
    if(defined(invoker.defines)){
        action(invoker.dep_name){
            script = rebase_path("//gn/ConfigFile.py")
            args = invoker.defines + _args
            outputs = [invoker.output_name]
        }
    }
    else{
        action(invoker.dep_name){
            script =rebase_path( "//gn/ConfigFile.py")
            args = _args
            outputs = [invoker.output_name]
        }
    }
    
}

template("omega_wtk_static_lib"){
    assert(defined(invoker.sources))
    # if(is_windows){
    #  name = target_name + ""
    # }
    # else {
    #     name = target_name
    # }
    _defines = []
    if(is_windows) {
        _defines += [
            "TARGET_WIN32"
        ]
    }
    else if(is_mac){
        _defines += [
            "TARGET_MACOS"
        ]
    }

    if(defined(invoker.defines)){
        invoker.defines += _defines
    }
    else {
        invoker.defines = _defines
    }

    if(defined(invoker.include_dirs)) {
        invoker.include_dirs += [
            "//include"
        ]
    }
    else {
        invoker.include_dirs = [
            "//include"
        ]
    }

    invoker.output_name = "../lib/" + target_name

    static_library(target_name){
        forward_variables_from(invoker,"*")
    }
}

template("omega_wtk_shared_lib"){
    assert(defined(invoker.sources))
     invoker.output_name = "../lib/" + target_name
    shared_library(name){
        forward_variables_from(invoker,"*")
    }
}

template("omega_wtk_app_config"){
    #  assert(defined(sources))
     assert(defined(target_name))
     print(target_name)
     assert(defined(invoker.app_entry))
     assert(defined(invoker.out_dir))

     out_dir = invoker.out_dir
    
    config_defines = [
        "-DAPPNAME=" + target_name,
        "-DAPPENTRY=" + invoker.app_entry
    ]

    if(is_windows){
        copy("other-res" + target_name){
            sources = [
                "target/windows/small.ico",
                "target/windows/app.ico",
                "target/windows/targetver.h"
            ]
            outputs = [
                "$out_dir/{{source_file_part}}"
            ]
        }

        configure_file("//target/windows/mmain.cpp.in"){
            defines = config_defines
            dep_name = "main-cpp-config__"
            output_name = "$out_dir/mmain.cpp"
        }
        configure_file("//target/windows/resource.h.in"){
            defines = config_defines
            dep_name = "resource-h-config__"
            output_name  = "$out_dir/resource.h"
        }
        configure_file("//target/windows/resource_script.rc.in"){
            defines = config_defines
             dep_name = "resource-rc-config__"
            output_name = "$out_dir/resource_script.rc"
        }
        # invoker.deps += [
        #     ":win_copy"
        # ]
    }
    else if(is_mac){
        t_name = "appdelegate-mm-config__" + target_name
        t_name_2 = "info-plist-config__" + target_name

        copy("other-res" + target_name){
            sources = [
                "//target/macos/main.mm",
                "//target/macos/English.lproj/MainMenu.xib",
                "//target/macos/AppDelegate.h"
            ]
            outputs = [
                "$out_dir/{{source_file_part}}"
            ]
        }

        configure_file("//target/macos/AppDelegate.mm"){
            defines = config_defines
            dep_name = t_name
            output_name = "$out_dir/AppDelegate.mm"
        }
        configure_file("//target/macos/Info.plist.in"){
            defines = config_defines
            dep_name = t_name_2
            output_name = "$out_dir/Info.plist"
        }
    }
}

template("omega_wtk_test"){
    assert(defined(invoker.sources))
    if(!defined(invoker.include_dirs)){
        invoker.include_dirs = []
    }
    if(!defined(invoker.ldflags)){
        if(is_windows){
            invoker.ldflags = ["/subsystem:WINDOWS"]
        }
        else if(is_mac){
            # invoker.ldflags = ["-"]
        }
    }
    _deps = [
            ":OmegaWTK",
            ":other-res$target_name"
        ]
    if(is_windows){
        _deps += [
             ":main-cpp-config__",
            ":resource-h-config__",
            ":resource-rc-config__"
        ]
    }
    else if(is_mac){
        t_name = "appdelegate-mm-config__" + target_name
        _deps += [
            ":$t_name",
        ]
    }
    if(defined(invoker.deps)){
        invoker.deps += _deps
    }
    else {
        invoker.deps = _deps
    }
   
    out_dir = "$root_out_dir/tests"

    omega_wtk_app_config(target_name){
        app_entry = invoker.app_entry
        # deps = invoker.deps 
        out_dir =  out_dir
    }

    invoker.include_dirs += [
        rebase_path("$omega_wtk_include_dir"),
        "$out_dir"
    ] 
    if(is_windows){
        invoker.sources += [
            "$out_dir/mmain.cpp",
            "$out_dir/resource_script.rc"
        ]
        invoker.ldflags += [
            "/MANIFEST:embed",
            "/MANIFESTINPUT:" + rebase_path("//target/windows/app.exe.manifest")
        ]
    }
    _defines = []
    if(is_windows) {
        _defines += [
            "TARGET_WIN32",
            "WINDOWS_PRIVATE"
        ]
    }
    else if(is_mac){
        _defines += [
            "TARGET_MACOS"
        ]
        invoker.sources += [
            "$out_dir/AppDelegate.h",
            "$out_dir/AppDelegate.mm",
            "$out_dir/main.mm"
        ]
        _libs = [
            "c",
            "c++"
        ]
        if(defined(invoker.libs)) {
            invoker.libs += _libs
        }
        else {
            invoker.libs = _libs
        }
    }

    if(defined(invoker.defines)){
        invoker.defines += _defines
    }
    else {
        invoker.defines = _defines
    }

    invoker.output_name = "tests/" + target_name
    executable(target_name){
        forward_variables_from(invoker,"*")
        if(is_windows) {
            output_extension = "exe"
        }
    }
    app_name = "$target_name"
    if(is_mac){

        # action("compile-nib__${target_name}") {
        #     script = rebase_path("gn/ibtool.py")
        #     args = ["-I","../target/macos/English.lproj/MainMenu.xib","-D","$root_out_dir/obj","-O","$root_out_dir/obj/English.lproj/MainMenu.nib"]
        #     outputs = [
        #         "$root_out_dir/obj/English.lproj/MainMenu.nib"
        #     ]
        # }
        bundle_data("${target_name}__metal_copy"){
            public_deps = [
                ":omegawtk",
                # ":compile-nib__${app_name}"
            ]
            sources = [
                "$root_out_dir/lib/omegawtk.metallib",
            ]
            outputs = [
                "{{bundle_resources_dir}}/default.metallib",
                # "{{bundle_resources_dir}}/MainMenu.nib"
            ]
        }
        bundle_data("${target_name}__res_copy"){
            sources = [
                "//target/macos/MainMenu.nib",
            ]
            outputs = [
                "{{bundle_resources_dir}}/{{source_file_part}}",
                # "{{bundle_resources_dir}}/MainMenu.nib"
            ]
        }
        bundle_data("${target_name}__info_plist"){
            public_deps = [
                ":info-plist-config__${app_name}"
            ]
            sources = [
                "$out_dir/Info.plist"
            ]
            outputs = [
                "{{bundle_contents_dir}}/Info.plist"
            ]
        }
        bundle_data("${target_name}_exec"){
            public_deps = [
                ":$app_name"
            ]
            sources = ["$out_dir/$app_name"]
            outputs = ["{{bundle_executable_dir}}/$app_name"]
        }
        create_bundle("${target_name}.app"){

            bundle_root_dir = "$root_build_dir/$target_name"
            bundle_contents_dir  = "$bundle_root_dir/Contents"
            bundle_resources_dir = "$bundle_contents_dir/Resources"
            bundle_executable_dir = "$bundle_contents_dir/MacOS"

            xcode_extra_attributes = {
                DEBUG_INFORMATION_FORMAT = "dwarf"
            }
            deps = [
                ":${app_name}__metal_copy",
                ":${app_name}__res_copy",
                ":${app_name}__info_plist",
                ":${app_name}_exec"
            ]
        }
    }
}

## Third Party Libararies!!

# Libpng

