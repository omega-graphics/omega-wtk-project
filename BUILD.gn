import("//gn/OmegaWTK.gni")

declare_args(){
    directx_12 = true
    vcpkg_installed_path = ""
}

if(vcpkg_installed_path == ""){
    print("VCPKG will NOT use")
    useVcpkg = false
    declare_args(){
        libpng_include_path = ""
        libpng_lib_path = ""
        libtiff_include_path = ""
        libtiff_lib_path = ""
        libjpeg_turbo_include_path = ""
        libjpeg_turbo_lib_path = ""
        ffmpeg_include_path = ""
        ffmpeg_lib_path = ""
    }  
}
else {
    print("VCPKG WILL USE!")
    useVcpkg = true
}

config("external_media_libs_config") {
    if(useVcpkg) {
        lib_dirs = [
            "$vcpkg_installed_path/lib"
        ]
    }
    else {

    }
    if(useVcpkg){
        include_dirs = [
            "$vcpkg_installed_path/include"
        ]
    }
    if(is_windows){
        if(useVcpkg){
            libs = [
                "$vcpkg_installed_path/lib/avcodec.lib",
                "$vcpkg_installed_path/lib/avutil.lib",
                "$vcpkg_installed_path/lib/libpng16.lib",
                "$vcpkg_installed_path/lib/tiffxx.lib",
            ]
        }
    }
    else {
        libs = [
            "avcodec",
            "avutil",
            "png",
            "tiff",
        ]
    }
}

omega_wtk_include_dir = "//include/omegaWTK"

omega_wtk_static_lib("omegaWTKCore"){
    sources = [
        # Headers
        "$omega_wtk_include_dir/Core/Core.h",
        "$omega_wtk_include_dir/Core/Math.h",
        "$omega_wtk_include_dir/Core/MultiThreading.h",
        # Sources
        "lib/Core/Core.cpp",
        "lib/Core/MultiThreading.cpp"
    ]
    if(is_mac){
        sources += [
            "lib/Core/FSCocoa.mm"
        ]
    }
}

omega_wtk_static_lib("omegaWTKNative"){
    sources = [
        # Headers
        "$omega_wtk_include_dir/Native/NativeApp.h",
        "$omega_wtk_include_dir/Native/NativeDialog.h",
        "$omega_wtk_include_dir/Native/NativeEvent.h",
        "$omega_wtk_include_dir/Native/NativeItem.h",
        "$omega_wtk_include_dir/Native/NativeMenu.h",
        "$omega_wtk_include_dir/Native/NativeWindow.h",
        # Sources
        "lib/Native/NativeApp.cpp",
        "lib/Native/NativeDialog.cpp",
        "lib/Native/NativeEvent.cpp",
        "lib/Native/NativeItem.cpp",
        "lib/Native/NativeMenu.cpp",
        "lib/Native/NativeWindow.cpp"
    ]
    include_dirs = [
        "//lib/Native/private_include"
    ]
    if(is_mac){
        mac_source_prefix = "//lib/Native/macos"
        sources += [
            # Sources
            "$mac_source_prefix/CocoaApp.h",
            "$mac_source_prefix/CocoaApp.mm",
            "$mac_source_prefix/CocoaAppWindow.h",
            "$mac_source_prefix/CocoaAppWindow.mm",
            "$mac_source_prefix/CocoaEvent.mm",
            "$mac_source_prefix/CocoaItem.mm",
            "$mac_source_prefix/CocoaMenu.h",
            "$mac_source_prefix/CocoaMenu.mm",
            "$mac_source_prefix/CocoaUtils.mm",
            "$mac_source_prefix/MakeItem.h",
            "$mac_source_prefix/MakeItem.mm",
            # Headers
            "//lib/Native/private_include/NativePrivate/macos/CocoaEvent.h",
            "//lib/Native/private_include/NativePrivate/macos/CocoaItem.h",
            "//lib/Native/private_include/NativePrivate/macos/CocoaUtils.h"
        ]
        frameworks = [
            "Cocoa.framework"
        ]
    }
    else if(is_windows){
        defines = [
            "WINDOWS_PRIVATE"
        ]
        win_source_prefix = "//lib/Native/win"
        sources += [
            "$win_source_prefix/HWNDFactory.h",
            "$win_source_prefix/HWNDFactory.cpp",
            "$win_source_prefix/HWNDItem.cpp",
            "$win_source_prefix/MakeItem.cpp",
            "$win_source_prefix/MakeItem.h",
            "$win_source_prefix/WinApp.h",
            "$win_source_prefix/WinApp.cpp",
            "$win_source_prefix/WinAppWindow.h",
            "$win_source_prefix/WinAppWindow.cpp",
            "$win_source_prefix/WinEvent.cpp",
            "$win_source_prefix/WinMenu.h",
            "$win_source_prefix/WinMenu.cpp",
            "$win_source_prefix/WinDialog.h",
            "$win_source_prefix/WinDialog.cpp",
            # Headers
            "//lib/Native/private_include/NativePrivate/win/HWNDItem.h",
            "//lib/Native/private_include/NativePrivate/win/WinEvent.h"
        ]
    }
    else {

    }
    public_deps = [
        ":omegaWTKCore"
    ]
}

omega_wtk_static_lib("omegaWTKMedia"){
    configs = [
        ":external_media_libs_config"
    ]
    sources = [
        # Headers 
        "$omega_wtk_include_dir/Media/ImgCodec.h",
        "$omega_wtk_include_dir/Media/VideoCodec.h",
        "$omega_wtk_include_dir/Media/VideoCaptureSession.h",
        "$omega_wtk_include_dir/Media/AudioCaptureSession.h",

        # Sources 
        "lib/Media/ImgCodec.cpp",
        "lib/Media/VideoCodec.cpp",
        "lib/Media/VideoCaptureSession.cpp",
        "lib/Media/AudioCaptureSession.cpp"
    ]
    public_deps = [
        ":omegaWTKCore"
    ]
}

if(is_mac) {
    mtl_backend_src_dir = "//lib/Composition/mtl"
    metal_library("omegawtk"){
        sources = [
            rebase_path("$mtl_backend_src_dir/OmegaWTKShaders.metal")
        ]
        output_dir = "$root_out_dir/lib"
        
    }
}

omega_wtk_static_lib("omegaWTKComposition"){
    sources = [
        # Headers 
        "$omega_wtk_include_dir/Composition/Backend.h",
        "$omega_wtk_include_dir/Composition/Brush.h",
        "$omega_wtk_include_dir/Composition/Color.h",
        "$omega_wtk_include_dir/Composition/Compositor.h",
        "$omega_wtk_include_dir/Composition/GeometricGraphicsPath.h",
        "$omega_wtk_include_dir/Composition/Layer.h",
        "$omega_wtk_include_dir/Composition/LayerAnimation.h",
        "$omega_wtk_include_dir/Composition/Text.h",
        "$omega_wtk_include_dir/Composition/Visual.h",
        "$omega_wtk_include_dir/Composition/ViewRenderTarget.h",

         # Sources
         # Backend SRC
        "lib/Composition/Backend.cpp",
        "lib/Composition/BackendPriv.h",
        "lib/Composition/BackendPriv.cpp",
        "lib/Composition/BDCompositionDevice.h",
        "lib/Composition/BDCompositionDevice.cpp",
        "lib/Composition/BDCompositionFontFactory.h",
        "lib/Composition/BDCompositionFontFactory.cpp",
        "lib/Composition/BDCompositionImage.h",
        "lib/Composition/BDCompositionImage.cpp",
        "lib/Composition/BDCompositionRenderTarget.h",
        "lib/Composition/BDCompositionRenderTarget.cpp",
        "lib/Composition/BDCompositionVisualTree.h",
        "lib/Composition/BDCompositionVisualTree.cpp",
        # Frontend SRC
        "lib/Composition/Brush.cpp",
        "lib/Composition/Color.cpp",
        "lib/Composition/Compositor.cpp",
        "lib/Composition/GeometricGraphicsPath.cpp",
        "lib/Composition/Layer.cpp",
        "lib/Composition/LayerAnimation.cpp",
        "lib/Composition/Text.cpp",
        "lib/Composition/Visual.cpp",
        "lib/Composition/ViewRenderTarget.cpp"

    ]
    include_dirs = [
        "//lib/Native/private_include"
    ]
    if(is_windows){
        directx_backend_src_dir = "//lib/Composition/dx"
        if(directx_12){
            defines = [
                "DIRECT3D_12"
            ]
        }
        sources += [
            "$directx_backend_src_dir/DXBDCompositionDevice.h",
            "$directx_backend_src_dir/DXBDCompositionDevice.cpp",
            "$directx_backend_src_dir/DXBDCompositionRenderTarget.h",
            "$directx_backend_src_dir/DXBDCompositionRenderTarget.cpp",
            "$directx_backend_src_dir/DXBDCompositionFontFactory.h",
            "$directx_backend_src_dir/DXBDCompositionFontFactory.cpp",
            "$directx_backend_src_dir/DXBDCompositionImage.h",
            "$directx_backend_src_dir/DXBDCompositionImage.cpp",
            "$directx_backend_src_dir/DCVisualTree.h",
            "$directx_backend_src_dir/DCVisualTree.cpp"
        ]
    }
    else if(is_mac){
        sources += [
            "$mtl_backend_src_dir/MetalBridgeHeader.h",
            "$mtl_backend_src_dir/MTLBackend.h",
            "$mtl_backend_src_dir/MTLBDCALayerTree.h",
            "$mtl_backend_src_dir/MTLBDCALayerTree.mm",
            "$mtl_backend_src_dir/MTLBDCompositionDevice.h",
            "$mtl_backend_src_dir/MTLBDCompositionDevice.mm",
            "$mtl_backend_src_dir/MTLBDCompositionFontFactory.h",
            "$mtl_backend_src_dir/MTLBDCompositionFontFactory.mm",
            "$mtl_backend_src_dir/MTLBDCompositionImage.h",
            "$mtl_backend_src_dir/MTLBDCompositionImage.mm",
            "$mtl_backend_src_dir/MTLBDCompositionRenderTarget.h",
            "$mtl_backend_src_dir/MTLBDCompositionRenderTarget.mm",
            "$mtl_backend_src_dir/MTLBDTriangulator.h",
            "$mtl_backend_src_dir/MTLBDTriangulator.mm",
        ]
        frameworks = [
            "QuartzCore.framework",
            "Metal.framework",
            "MetalPerformanceShaders.framework"
        ]
    }


    public_deps = [
        ":omegaWTKCore",
        ":omegaWTKNative",
        ":omegaWTKMedia",
       
    ]

    if(is_mac){
        public_deps += [
             # Metal Library
            ":omegawtk"
        ]
    }
}

omega_wtk_static_lib("omegaWTKUI"){
    if(is_windows) {
        defines = [
            "WINDOWS_PRIVATE"
        ]
    }
    sources = [
        # Headers
        "$omega_wtk_include_dir/UI/App.h",
        "$omega_wtk_include_dir/UI/AppWindow.h",
        "$omega_wtk_include_dir/UI/ButtonBase.h",
        "$omega_wtk_include_dir/UI/Menu.h",
        "$omega_wtk_include_dir/UI/PushButton.h",
        "$omega_wtk_include_dir/UI/VideoView.h",
        "$omega_wtk_include_dir/UI/View.h",
        "$omega_wtk_include_dir/UI/ViewAnimator.h",
        "$omega_wtk_include_dir/UI/Widget.h",
        # Sources 
        "lib/UI/App.cpp",
        "lib/UI/AppWindow.cpp",
        "lib/UI/ButtonBase.cpp",
        "lib/UI/Menu.cpp",
        "lib/UI/PushButton.cpp",
        "lib/UI/VideoView.cpp",
        "lib/UI/View.cpp",
        "lib/UI/ViewAnimator.cpp",
        "lib/UI/Widget.cpp"
    ]
    public_deps = [
        ":omegaWTKCore",
        ":omegaWTKNative",
        ":omegaWTKMedia",
        ":omegaWTKComposition"
    ]
}

omega_wtk_static_lib("OmegaWTK"){
    complete_static_lib = true
    # if(is_windows) {
    #     # arflags = [
    #     #     "/WHOLEARCHIVE"
    #     # ]
    # }
    sources = [
        "//include/OmegaWTK.h",
        "lib/OmegaWTK.cpp"
    ]
    public_deps = [
        ":omegaWTKCore",
        ":omegaWTKNative",
        ":omegaWTKMedia",
        ":omegaWTKComposition",
        ":omegaWTKUI"
    ]
}

omega_wtk_test("RootWidgetTest"){
    sources = [
        "tests/RootWidget/Main.h",
        "tests/RootWidget/Main.cpp"
    ]
    app_entry = "Main.h"
    include_dirs = [
        "tests/RootWidget"
    ]
}
