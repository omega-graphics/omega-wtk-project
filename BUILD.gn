import("./gn/OmegaWTK.gni")

declare_args(){
    directx_12 = true
    build_swift = false
    build_as_cxx_20_module = false
    is_external_project = false
}

omegawtk_include_dir = get_path_info("./include","abspath")
omegawtk_src_dir = get_path_info("./lib","abspath")

assetc_dir = get_path_info("./tools/assetc","abspath")

# icu_69_lib = get_path_info("./external-libs/icu-69","abspath")

pcre2_lib = get_path_info("./external-libs/pcre2","abspath")
pcre2_config = get_path_info("./external-libs/pcre2:pcre2_config","abspath")

external_media_libs = [
    get_path_info("./external-libs/zlib","abspath"),
    get_path_info("./external-libs/libjpeg-turbo","abspath"),
    get_path_info("./external-libs/libpng","abspath"),
]
external_media_libs_conf = [
    get_path_info("./external-libs/libpng:libpng_config","abspath"),
    get_path_info("./external-libs/libjpeg-turbo:libjpeg-turbo_config","abspath"),
    get_path_info("./external-libs/zlib:zlib_config","abspath")
]


omega_wtk_include_dir = omegawtk_include_dir

omega_wtk_static_lib("omegaWTKCore"){
    # if(useVcpkg) {
    #     lib_dirs = [
    #         "$vcpkg_installed_path/lib"
    #     ]
    # }
    include_dirs = [
        assetc_dir
    ]
    public_deps = [
        pcre2_lib,
        # icu_69_lib
    ]
    public_configs = [
        pcre2_config
    ]
    sources = [
        # Headers
        "$omega_wtk_include_dir/Core/Core.h",
        "$omega_wtk_include_dir/Core/Math.h",
        "$omega_wtk_include_dir/Core/MultiThreading.h",
        "$omega_wtk_include_dir/Core/FS.h",
        # Sources
        "${omegawtk_src_dir}/Core/Core.cpp",
        "${omegawtk_src_dir}/Core/MultiThreading.cpp",
        "${omegawtk_src_dir}/Core/FS.cpp"
    ]
    if(is_mac){
        sources += [
            "${omegawtk_src_dir}/Core/FSCocoa.mm",
            "${omegawtk_src_dir}/Core/FSCocoa.h"
        ]
    }
}

omega_wtk_static_lib("omegaWTKNative"){
    sources = [
        # Headers
        "$omega_wtk_include_dir/Native/NativeApp.h",
        "$omega_wtk_include_dir/Native/NativeDialog.h",
        "$omega_wtk_include_dir/Native/NativeEvent.h",
        "$omega_wtk_include_dir/Native/NativeItem.h",
        "$omega_wtk_include_dir/Native/NativeMenu.h",
        "$omega_wtk_include_dir/Native/NativeWindow.h",
        # Sources
        "${omegawtk_src_dir}/Native/NativeApp.cpp",
        "${omegawtk_src_dir}/Native/NativeDialog.cpp",
        "${omegawtk_src_dir}/Native/NativeEvent.cpp",
        "${omegawtk_src_dir}/Native/NativeItem.cpp",
        "${omegawtk_src_dir}/Native/NativeMenu.cpp",
        "${omegawtk_src_dir}/Native/NativeWindow.cpp"
    ]
    include_dirs = [
        "${omegawtk_src_dir}/Native/private_include"
    ]
    if(is_mac){
        mac_source_prefix = "${omegawtk_src_dir}/Native/macos"
        sources += [
            # Sources
            "$mac_source_prefix/CocoaApp.h",
            "$mac_source_prefix/CocoaApp.mm",
            "$mac_source_prefix/CocoaAppWindow.h",
            "$mac_source_prefix/CocoaAppWindow.mm",
            "$mac_source_prefix/CocoaDialog.h",
            "$mac_source_prefix/CocoaDialog.mm",
            "$mac_source_prefix/CocoaEvent.mm",
            "$mac_source_prefix/CocoaItem.mm",
            "$mac_source_prefix/CocoaMenu.h",
            "$mac_source_prefix/CocoaMenu.mm",
            "$mac_source_prefix/CocoaUtils.mm",
            "$mac_source_prefix/MakeItem.h",
            "$mac_source_prefix/MakeItem.mm",
            # Headers
            "${omegawtk_src_dir}/Native/private_include/NativePrivate/macos/CocoaEvent.h",
            "${omegawtk_src_dir}/Native/private_include/NativePrivate/macos/CocoaItem.h",
            "${omegawtk_src_dir}/Native/private_include/NativePrivate/macos/CocoaUtils.h"
        ]
        frameworks = [
            "Cocoa.framework"
        ]
    }
    else if(is_windows){
        defines = [
            "WINDOWS_PRIVATE"
        ]
        win_source_prefix = "${omegawtk_src_dir}/Native/win"
        sources += [
            "$win_source_prefix/HWNDFactory.h",
            "$win_source_prefix/HWNDFactory.cpp",
            "$win_source_prefix/HWNDItem.cpp",
            "$win_source_prefix/MakeItem.cpp",
            "$win_source_prefix/MakeItem.h",
            "$win_source_prefix/WinApp.h",
            "$win_source_prefix/WinApp.cpp",
            "$win_source_prefix/WinAppWindow.h",
            "$win_source_prefix/WinAppWindow.cpp",
            "$win_source_prefix/WinEvent.cpp",
            "$win_source_prefix/WinMenu.h",
            "$win_source_prefix/WinMenu.cpp",
            "$win_source_prefix/WinDialog.h",
            "$win_source_prefix/WinDialog.cpp",
            # Headers
            "${omegawtk_src_dir}/Native/private_include/NativePrivate/win/HWNDItem.h",
            "${omegawtk_src_dir}/Native/private_include/NativePrivate/win/WinEvent.h"
        ]
    }
    else {

    }
    public_deps = [
        ":omegaWTKCore"
    ]
}

omega_wtk_static_lib("omegaWTKMedia"){
    include_dirs = [
        "${omegawtk_src_dir}/Core"
    ]
    public_deps = [
        ":omegaWTKCore",
    ] + external_media_libs
    public_configs = external_media_libs_conf
    sources = [
        # Headers 
        "$omega_wtk_include_dir/Media/ImgCodec.h",
        "$omega_wtk_include_dir/Media/VideoCodec.h",
        "$omega_wtk_include_dir/Media/VideoCapture.h",
        "$omega_wtk_include_dir/Media/AudioCapture.h",

        # Sources 
        "${omegawtk_src_dir}/Media/ImgCodec.cpp",
        "${omegawtk_src_dir}/Media/VideoCodec.cpp",
        # "lib/Media/VideoCapture.cpp",
        # "lib/Media/AudioCapture.cpp"
    ]
}

if(is_mac) {
    mtl_backend_src_dir = "${omegawtk_src_dir}/Composition/mtl"
    metal_library("omegawtk"){
        sources = [
            rebase_path("$mtl_backend_src_dir/OmegaWTKShaders.metal")
        ]
        output_dir = "$root_out_dir/lib"
        
    }
}

omega_wtk_static_lib("omegaWTKComposition"){
    sources = [
        # Headers 
        "$omega_wtk_include_dir/Composition/Backend.h",
        "$omega_wtk_include_dir/Composition/Brush.h",
        "$omega_wtk_include_dir/Composition/Color.h",
        "$omega_wtk_include_dir/Composition/Compositor.h",
        "$omega_wtk_include_dir/Composition/GeometricGraphicsPath.h",
        "$omega_wtk_include_dir/Composition/FontEngine.h",
        "$omega_wtk_include_dir/Composition/Layer.h",
        "$omega_wtk_include_dir/Composition/LayerAnimation.h",
        "$omega_wtk_include_dir/Composition/Text.h",
        "$omega_wtk_include_dir/Composition/Visual.h",
        "$omega_wtk_include_dir/Composition/ViewRenderTarget.h",

        # Sources
        # Backend SRC
        "${omegawtk_src_dir}/Composition/Backend.cpp",
        "${omegawtk_src_dir}/Composition/BackendPriv.h",
        "${omegawtk_src_dir}/Composition/BackendPriv.cpp",
        "${omegawtk_src_dir}/Composition/BDCompositionDevice.h",
        "${omegawtk_src_dir}/Composition/BDCompositionDevice.cpp",
        "${omegawtk_src_dir}/Composition/BDCompositionImage.h",
        "${omegawtk_src_dir}/Composition/BDCompositionImage.cpp",
        "${omegawtk_src_dir}/Composition/BDCompositionRenderTarget.h",
        "${omegawtk_src_dir}/Composition/BDCompositionRenderTarget.cpp",
        "${omegawtk_src_dir}/Composition/BDCompositionVisualTree.h",
        "${omegawtk_src_dir}/Composition/BDCompositionVisualTree.cpp",
        # Frontend SRC
        "${omegawtk_src_dir}/Composition/Brush.cpp",
        "${omegawtk_src_dir}/Composition/Color.cpp",
        "${omegawtk_src_dir}/Composition/Compositor.cpp",
        "${omegawtk_src_dir}/Composition/GeometricGraphicsPath.cpp",
        "${omegawtk_src_dir}/Composition/Layer.cpp",
        "${omegawtk_src_dir}/Composition/LayerAnimation.cpp",
        "${omegawtk_src_dir}/Composition/Visual.cpp",
        "${omegawtk_src_dir}/Composition/ViewRenderTarget.cpp"

    ]
    include_dirs = [
        "${omegawtk_src_dir}/Native/private_include"
    ]
    if(is_windows){
        directx_backend_src_dir = "${omegawtk_src_dir}/Composition/dx"
        if(directx_12){
            defines = [
                "DIRECT3D_12"
            ]
        }
        sources += [
            "$directx_backend_src_dir/DXBDCompositionDevice.h",
            "$directx_backend_src_dir/DXBDCompositionDevice.cpp",
            "$directx_backend_src_dir/DXBDCompositionRenderTarget.h",
            "$directx_backend_src_dir/DXBDCompositionRenderTarget.cpp",
            "$directx_backend_src_dir/DXBDCompositionFontFactory.h",
            "$directx_backend_src_dir/DXBDCompositionFontFactory.cpp",
            "$directx_backend_src_dir/DXBDCompositionImage.h",
            "$directx_backend_src_dir/DXBDCompositionImage.cpp",
            "$directx_backend_src_dir/DCVisualTree.h",
            "$directx_backend_src_dir/DCVisualTree.cpp",
            # Font Engine
            "${omegawtk_src_dir}/Composition/DWriteFontEngine.cpp"
        ]
    }
    else if(is_mac){
        sources += [
            "$mtl_backend_src_dir/MetalBridgeHeader.h",
            "$mtl_backend_src_dir/MTLBackend.h",
            "$mtl_backend_src_dir/MTLBDCALayerTree.h",
            "$mtl_backend_src_dir/MTLBDCALayerTree.mm",
            "$mtl_backend_src_dir/MTLBDCompositionDevice.h",
            "$mtl_backend_src_dir/MTLBDCompositionDevice.mm",
            "$mtl_backend_src_dir/MTLBDCompositionImage.h",
            "$mtl_backend_src_dir/MTLBDCompositionImage.mm",
            "$mtl_backend_src_dir/MTLBDCompositionRenderTarget.h",
            "$mtl_backend_src_dir/MTLBDCompositionRenderTarget.mm",
            "$mtl_backend_src_dir/MTLBDTriangulator.h",
            "$mtl_backend_src_dir/MTLBDTriangulator.mm",
            # Font Engine
            "${omegawtk_src_dir}/Composition/CTFontEngine.mm"
        ]
        frameworks = [
            "QuartzCore.framework",
            "Metal.framework",
            "MetalPerformanceShaders.framework"
        ]
    }


    public_deps = [
        ":omegaWTKCore",
        ":omegaWTKNative",
        ":omegaWTKMedia",
    
    ]

    if(is_mac){
        public_deps += [
            # Metal Library
            ":omegawtk"
        ]
    }
}

omega_wtk_static_lib("omegaWTKUI"){
    if(is_windows) {
        defines = [
            "WINDOWS_PRIVATE"
        ]
    }
    sources = [
        # Headers
        "$omega_wtk_include_dir/UI/App.h",
        "$omega_wtk_include_dir/UI/AppWindow.h",
        "$omega_wtk_include_dir/UI/Menu.h",
        "$omega_wtk_include_dir/UI/Text.h",
        "$omega_wtk_include_dir/UI/VideoView.h",
        "$omega_wtk_include_dir/UI/View.h",
        "$omega_wtk_include_dir/UI/ViewAnimator.h",
        "$omega_wtk_include_dir/UI/Stack.h",
        "$omega_wtk_include_dir/UI/Widget.h",
        "$omega_wtk_include_dir/UI/WidgetTreeHost.h",
        "$omega_wtk_include_dir/UI/Layout.h",
        "$omega_wtk_include_dir/UI/Panel.h",
        # Sources 
        "${omegawtk_src_dir}/UI/App.cpp",
        "${omegawtk_src_dir}/UI/AppWindow.cpp",
        "${omegawtk_src_dir}/UI/Menu.cpp",
        "${omegawtk_src_dir}/UI/Text.cpp",
        "${omegawtk_src_dir}/UI/VideoView.cpp",
        "${omegawtk_src_dir}/UI/View.cpp",
        "${omegawtk_src_dir}/UI/ViewAnimator.cpp",
        "${omegawtk_src_dir}/UI/Stack.cpp",
        "${omegawtk_src_dir}/UI/Widget.cpp",
        "${omegawtk_src_dir}/UI/WidgetTreeHost.cpp",
        "${omegawtk_src_dir}/UI/Layout.cpp",
        "${omegawtk_src_dir}/UI/Panel.cpp"
    ]
    public_deps = [
        ":omegaWTKCore",
        ":omegaWTKNative",
        ":omegaWTKMedia",
        ":omegaWTKComposition"
    ]
}

omega_wtk_shared_lib("OmegaWTK"){
    if(is_mac){
        framework = true
        framework_version = "0.6"
        framework_info_plist = "${omegawtk_src_dir}/Info.plist"
        frameworks = [
            "Cocoa.framework",
            "QuartzCore.framework",
            "Metal.framework",
            "MetalPerformanceShaders.framework"
        ]
        embedded_libs = [
            zlib_link,
            pcre2_link,
            libjpeg_turbo_link,
            libpng_link,
        ]
    }
    if(is_windows) {
        # arflags = [
        #     "/WHOLEARCHIVE"
        # ]
    }
    sources = [
        "${omegawtk_src_dir}/OmegaWTK.cpp"
    ]
    public_deps = [
        ":omegaWTKCore",
        ":omegaWTKNative",
        ":omegaWTKMedia",
        ":omegaWTKComposition",
        ":omegaWTKUI"
    ]
}

omega_wtk_tool("omegawtk-assetc"){
    sources = [
        "${assetc_dir}/main.cpp"
    ]
    # public_deps = [
    #     "//external-libs/openssl",
    # ]
    # public_configs = [
    #     "//external-libs/openssl:openssl_config"
    # ]
    # external_shared_libs = openssl_link
}

if(!is_external_project){

    omega_wtk_test("RootWidgetTest"){
        assets_dir = "tests/RootWidget/MyAssets"
        sources = [
            "tests/RootWidget/Main.cpp"
        ]
        bundle_id = "org.omegagraphics.OmegaWTKRootWidgetTest"
    }

    omega_wtk_test("BasicAppTest"){
        sources = [
            "tests/BasicAppTest/main.cpp"
        ]
        if(!is_windows){
            bundle_id = "org.omegagraphics.OmegaWTKBasicAppTest"
        }
    }

    omega_wtk_test("VideoViewTest"){
        sources = [
            "tests/VideoViewTest/main.cpp"
        ]
        if(!is_windows){
            bundle_id = "org.omegagraphics.OmegaWTKVideoViewTest"
        }
    }

    config("omegaWTK-rpath-config"){
        ldflags = [
              "-Xlinker",
              "-rpath",
              "-Xlinker",
              "@loader_path",
               "-Xlinker",
              "-rpath",
              "-Xlinker",
              "@loader_path/OmegaWTK.framework/Libraries"
        ]
    }

    test("QueueHeapTest"){
        if(is_windows){
            defines = [
                "TARGET_WIN32"
            ]
        }
        else if(is_mac){
            defines = [
                "TARGET_MACOS"
            ]
            public_configs = [
                ":omegaWTK-rpath-config"
            ]
        }
        public_deps = [
            ":OmegaWTK"
        ]
        include_dirs = [
            omega_wtk_include_dir
        ]
        sources = [
            "./tests/QueueHeapTest/main.cpp"
        ]
        output_dir = "$root_out_dir/tests/other"
    }

    test("SchedulerTest"){
        if(is_windows){
            defines = [
                "TARGET_WIN32"
            ]
        }
        else if(is_mac){
            defines = [
                "TARGET_MACOS"
            ]
            public_configs = [
                ":omegaWTK-rpath-config"
            ]
        }
        public_deps = [
            ":OmegaWTK"
        ]
        include_dirs = [
            omega_wtk_include_dir
        ]
        sources = [
            "./tests/SchedulerTest/main.cpp"
        ]
        output_dir = "$root_out_dir/tests/other"
    }


}

# omega_wtk_test("COnly"){
#     sources = [
#         "tests/COnly/main.c"
#     ]
# }
